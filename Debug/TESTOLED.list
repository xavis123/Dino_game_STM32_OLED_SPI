
TESTOLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  080024a4  080024a4  000124a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002c5c  08002c5c  00012c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08002c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000570  20000014  08002c74  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000584  08002c74  00020584  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fcd7  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001fd1  00000000  00000000  0002fd14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009d53  00000000  00000000  00031ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a08  00000000  00000000  0003ba38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011a0  00000000  00000000  0003c440  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005fdf  00000000  00000000  0003d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003ee0  00000000  00000000  000435bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004749f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001fc8  00000000  00000000  0004751c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000014 	.word	0x20000014
 8000200:	00000000 	.word	0x00000000
 8000204:	0800248c 	.word	0x0800248c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000018 	.word	0x20000018
 8000220:	0800248c 	.word	0x0800248c

08000224 <HAL_TIM_PeriodElapsedCallback>:
int32_t score = 0, hscore = 0; //start point, highest point
int fl_invert = 1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  speed_cactus++;
 8000224:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
  speed_dino++;
 800022c:	4a0b      	ldr	r2, [pc, #44]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800022e:	6813      	ldr	r3, [r2, #0]
 8000230:	3301      	adds	r3, #1
 8000232:	6013      	str	r3, [r2, #0]
  speed_score_and_display++;
 8000234:	4a0a      	ldr	r2, [pc, #40]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000236:	6813      	ldr	r3, [r2, #0]
 8000238:	3301      	adds	r3, #1
 800023a:	6013      	str	r3, [r2, #0]
  speed_sword++;
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800023e:	6813      	ldr	r3, [r2, #0]
 8000240:	3301      	adds	r3, #1
 8000242:	6013      	str	r3, [r2, #0]
  speed_bird++;
 8000244:	4a08      	ldr	r2, [pc, #32]	; (8000268 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000246:	6813      	ldr	r3, [r2, #0]
 8000248:	3301      	adds	r3, #1
 800024a:	6013      	str	r3, [r2, #0]
  speed_bird_wing++;
 800024c:	4a07      	ldr	r2, [pc, #28]	; (800026c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800024e:	6813      	ldr	r3, [r2, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	6013      	str	r3, [r2, #0]
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000040 	.word	0x20000040
 800025c:	20000044 	.word	0x20000044
 8000260:	20000048 	.word	0x20000048
 8000264:	2000004c 	.word	0x2000004c
 8000268:	20000038 	.word	0x20000038
 800026c:	2000003c 	.word	0x2000003c

08000270 <dino_work>:
}

void dino_work()
{
 8000270:	b508      	push	{r3, lr}
  //dino position
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET || dino1.y_dino != 38)
 8000272:	2101      	movs	r1, #1
 8000274:	481d      	ldr	r0, [pc, #116]	; (80002ec <dino_work+0x7c>)
 8000276:	f001 faa1 	bl	80017bc <HAL_GPIO_ReadPin>
 800027a:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <dino_work+0x80>)
 800027c:	b110      	cbz	r0, 8000284 <dino_work+0x14>
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	2a26      	cmp	r2, #38	; 0x26
 8000282:	d00b      	beq.n	800029c <dino_work+0x2c>
  //when play push button or dino is jumping/downing
  {

    if ((dino1.y_dino == 28) && (dino1.level_jump_dino == -2)) // increase/decrese jump speed like inertia
 8000284:	685a      	ldr	r2, [r3, #4]
 8000286:	2a1c      	cmp	r2, #28
 8000288:	d11f      	bne.n	80002ca <dino_work+0x5a>
 800028a:	68d9      	ldr	r1, [r3, #12]
 800028c:	3102      	adds	r1, #2
 800028e:	d102      	bne.n	8000296 <dino_work+0x26>
      dino1.level_jump_dino = -1;
 8000290:	f04f 31ff 	mov.w	r1, #4294967295
    {
      dino1.level_jump_dino = -2; // dino jumping
    }
    if (dino1.y_dino == 12) //12 is the highest position when dino jumping
    {
      dino1.level_jump_dino = 1; // dino downing
 8000294:	60d9      	str	r1, [r3, #12]
    }
    dino1.y_dino = dino1.y_dino + dino1.level_jump_dino; //y_dino change
 8000296:	68d9      	ldr	r1, [r3, #12]
 8000298:	440a      	add	r2, r1
 800029a:	605a      	str	r2, [r3, #4]
  //    }
  //    else if (dino1.fl_dino_foot == 0)
  //    	dino1.fl_dino_foot=1;

  //dino dead
  if ((cactus1.x_cactus > 5) && (cactus1.x_cactus < 24) && (dino1.y_dino > 34) && (cactus1.fl_cactus_destroy == 0))
 800029c:	4915      	ldr	r1, [pc, #84]	; (80002f4 <dino_work+0x84>)
 800029e:	680a      	ldr	r2, [r1, #0]
 80002a0:	3a06      	subs	r2, #6
 80002a2:	2a11      	cmp	r2, #17
 80002a4:	d806      	bhi.n	80002b4 <dino_work+0x44>
 80002a6:	685a      	ldr	r2, [r3, #4]
 80002a8:	2a22      	cmp	r2, #34	; 0x22
 80002aa:	dd03      	ble.n	80002b4 <dino_work+0x44>
 80002ac:	688a      	ldr	r2, [r1, #8]
 80002ae:	b90a      	cbnz	r2, 80002b4 <dino_work+0x44>
  {
    //if cactus.x_cactus in 5-> 24 and dino don't jump and cactus not be destroyed
    dino1.dino_status = 1; //dino dead
 80002b0:	2201      	movs	r2, #1
 80002b2:	609a      	str	r2, [r3, #8]
  }

  if ((bird1.x_bird > 5) && (bird1.x_bird < 24) && (dino1.y_dino < 20))
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <dino_work+0x88>)
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	3a06      	subs	r2, #6
 80002ba:	2a11      	cmp	r2, #17
 80002bc:	d815      	bhi.n	80002ea <dino_work+0x7a>
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	2a13      	cmp	r2, #19
 80002c2:	dc12      	bgt.n	80002ea <dino_work+0x7a>
  {
    //if bird in 5-> 24 and dino is jumping and cactus not be destroyed
    dino1.dino_status = 1; //dino dead
 80002c4:	2201      	movs	r2, #1
 80002c6:	609a      	str	r2, [r3, #8]
  }
}
 80002c8:	bd08      	pop	{r3, pc}
    if ((dino1.y_dino == 24) && (dino1.level_jump_dino == 1))
 80002ca:	2a18      	cmp	r2, #24
 80002cc:	d104      	bne.n	80002d8 <dino_work+0x68>
 80002ce:	68d9      	ldr	r1, [r3, #12]
 80002d0:	2901      	cmp	r1, #1
 80002d2:	d1e0      	bne.n	8000296 <dino_work+0x26>
      dino1.level_jump_dino = 2;
 80002d4:	2102      	movs	r1, #2
 80002d6:	e7dd      	b.n	8000294 <dino_work+0x24>
    if (dino1.y_dino == 38) // 38 is default position (when dino in ground)
 80002d8:	2a26      	cmp	r2, #38	; 0x26
 80002da:	d102      	bne.n	80002e2 <dino_work+0x72>
      dino1.level_jump_dino = -2; // dino jumping
 80002dc:	f06f 0101 	mvn.w	r1, #1
 80002e0:	e7d8      	b.n	8000294 <dino_work+0x24>
    if (dino1.y_dino == 12) //12 is the highest position when dino jumping
 80002e2:	2a0c      	cmp	r2, #12
 80002e4:	d1d7      	bne.n	8000296 <dino_work+0x26>
      dino1.level_jump_dino = 1; // dino downing
 80002e6:	2101      	movs	r1, #1
 80002e8:	e7d4      	b.n	8000294 <dino_work+0x24>
 80002ea:	bd08      	pop	{r3, pc}
 80002ec:	40011000 	.word	0x40011000
 80002f0:	2000050c 	.word	0x2000050c
 80002f4:	200004ac 	.word	0x200004ac
 80002f8:	200004b8 	.word	0x200004b8

080002fc <sword_work>:

void sword_work()
{
  /////////////////////////////Sword appear////////////////////////////////////////////////////
  if ((score != 0) && (score % 800 == 0) && (sword1.fl_dino_have_sword == 0))
 80002fc:	4b2d      	ldr	r3, [pc, #180]	; (80003b4 <sword_work+0xb8>)
{
 80002fe:	b510      	push	{r4, lr}
  if ((score != 0) && (score % 800 == 0) && (sword1.fl_dino_have_sword == 0))
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4c2d      	ldr	r4, [pc, #180]	; (80003b8 <sword_work+0xbc>)
 8000304:	b162      	cbz	r2, 8000320 <sword_work+0x24>
 8000306:	f44f 7148 	mov.w	r1, #800	; 0x320
 800030a:	fb92 f3f1 	sdiv	r3, r2, r1
 800030e:	fb01 2313 	mls	r3, r1, r3, r2
 8000312:	b92b      	cbnz	r3, 8000320 <sword_work+0x24>
 8000314:	68a3      	ldr	r3, [r4, #8]
 8000316:	b91b      	cbnz	r3, 8000320 <sword_work+0x24>
  {
    sword1.fl_sword_must_appear = 1; //if dino dont have sword and score % 80 = 0 -> sword appear
 8000318:	2301      	movs	r3, #1
 800031a:	6123      	str	r3, [r4, #16]
    sword1.x_sword = 115;
 800031c:	2373      	movs	r3, #115	; 0x73
 800031e:	6023      	str	r3, [r4, #0]
  }

  if ((speed_sword > 200) && (sword1.fl_sword_must_appear == 1))
 8000320:	4b26      	ldr	r3, [pc, #152]	; (80003bc <sword_work+0xc0>)
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	2ac8      	cmp	r2, #200	; 0xc8
 8000326:	dd0a      	ble.n	800033e <sword_work+0x42>
 8000328:	6922      	ldr	r2, [r4, #16]
 800032a:	2a01      	cmp	r2, #1
 800032c:	d11a      	bne.n	8000364 <sword_work+0x68>
  {
    speed_sword = 0;
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
    sword1.x_sword--;//sword position
 8000332:	6823      	ldr	r3, [r4, #0]
 8000334:	3b01      	subs	r3, #1
    if (sword1.x_sword <= 1)           //if sword display at end of screen but dino dont eat
 8000336:	2b01      	cmp	r3, #1
    sword1.x_sword--;//sword position
 8000338:	6023      	str	r3, [r4, #0]
    if (sword1.x_sword <= 1)           //if sword display at end of screen but dino dont eat
 800033a:	dc03      	bgt.n	8000344 <sword_work+0x48>
      sword1.fl_sword_must_appear = 0; //-> sword disappear
 800033c:	6122      	str	r2, [r4, #16]
  }

  //position dino: x= 10->30
  if ((sword1.fl_sword_must_appear == 1) && (10 < sword1.x_sword) && (sword1.x_sword < 30) && (18 < dino1.y_dino) && (dino1.y_dino < 22))
 800033e:	6923      	ldr	r3, [r4, #16]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d10f      	bne.n	8000364 <sword_work+0x68>
 8000344:	6823      	ldr	r3, [r4, #0]
 8000346:	3b0b      	subs	r3, #11
 8000348:	2b12      	cmp	r3, #18
 800034a:	d80b      	bhi.n	8000364 <sword_work+0x68>
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <sword_work+0xc4>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	3b13      	subs	r3, #19
 8000352:	2b02      	cmp	r3, #2
 8000354:	d806      	bhi.n	8000364 <sword_work+0x68>
  {
    sword1.fl_sword_must_appear = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	6123      	str	r3, [r4, #16]
    sword1.fl_dino_have_sword = 1;
 800035a:	2301      	movs	r3, #1
 800035c:	60a3      	str	r3, [r4, #8]
    sword1.durable_sword = 1000;
 800035e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000362:	60e3      	str	r3, [r4, #12]
  }

  ///////////////////////////////Sword cut///////////////////////////////////////////////
  if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET) && (sword1.fl_dino_have_sword == 1))
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	4817      	ldr	r0, [pc, #92]	; (80003c4 <sword_work+0xc8>)
 8000368:	f001 fa28 	bl	80017bc <HAL_GPIO_ReadPin>
 800036c:	b9f8      	cbnz	r0, 80003ae <sword_work+0xb2>
 800036e:	68a3      	ldr	r3, [r4, #8]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d11c      	bne.n	80003ae <sword_work+0xb2>
  {
    sword1.durable_sword = sword1.durable_sword - 5;
 8000374:	68e3      	ldr	r3, [r4, #12]
    {
      sword1.fl_sword = 0; //cut down
 8000376:	6160      	str	r0, [r4, #20]
    sword1.durable_sword = sword1.durable_sword - 5;
 8000378:	3b05      	subs	r3, #5
 800037a:	60e3      	str	r3, [r4, #12]
  else
    sword1.fl_sword = 1; //normal

  //sword cut effect position: x= 25 -> 44

  if ((sword1.fl_sword == 0) && (25 < cactus1.x_cactus) && (cactus1.x_cactus < 44) && (dino1.y_dino == 38) && (sword1.fl_dino_have_sword == 1) && (sword1.durable_sword > 0))
 800037c:	6963      	ldr	r3, [r4, #20]
 800037e:	b97b      	cbnz	r3, 80003a0 <sword_work+0xa4>
 8000380:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <sword_work+0xcc>)
 8000382:	6813      	ldr	r3, [r2, #0]
 8000384:	3b1a      	subs	r3, #26
 8000386:	2b11      	cmp	r3, #17
 8000388:	d80a      	bhi.n	80003a0 <sword_work+0xa4>
 800038a:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <sword_work+0xc4>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	2b26      	cmp	r3, #38	; 0x26
 8000390:	d106      	bne.n	80003a0 <sword_work+0xa4>
 8000392:	68a3      	ldr	r3, [r4, #8]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d103      	bne.n	80003a0 <sword_work+0xa4>
 8000398:	68e1      	ldr	r1, [r4, #12]
 800039a:	2900      	cmp	r1, #0
    // if dino cut a cactus when dino stand on ground (dino not jumping)
    cactus1.fl_cactus_destroy = 1; //cactus be destroyed
 800039c:	bfc8      	it	gt
 800039e:	6093      	strgt	r3, [r2, #8]

  if (sword1.durable_sword <= 0)
 80003a0:	68e3      	ldr	r3, [r4, #12]
 80003a2:	2b00      	cmp	r3, #0
  {
    sword1.fl_dino_have_sword = 0;
 80003a4:	bfde      	ittt	le
 80003a6:	2300      	movle	r3, #0
 80003a8:	60a3      	strle	r3, [r4, #8]
    sword1.durable_sword = 0;
 80003aa:	60e3      	strle	r3, [r4, #12]
 80003ac:	bd10      	pop	{r4, pc}
    sword1.fl_sword = 1; //normal
 80003ae:	2301      	movs	r3, #1
 80003b0:	6163      	str	r3, [r4, #20]
 80003b2:	e7e3      	b.n	800037c <sword_work+0x80>
 80003b4:	20000034 	.word	0x20000034
 80003b8:	20000568 	.word	0x20000568
 80003bc:	2000004c 	.word	0x2000004c
 80003c0:	2000050c 	.word	0x2000050c
 80003c4:	40011000 	.word	0x40011000
 80003c8:	200004ac 	.word	0x200004ac

080003cc <cactus_work>:
void cactus_work()
{
  //////////////////////////////////Cactus////////////////////////////////////////////////////////////////////////
  int speed_cactus_now;
  //////////////////////Increase speed cactus by score
  if (score <= 1000) // score display= score /10
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <cactus_work+0x44>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003d4:	dd14      	ble.n	8000400 <cactus_work+0x34>
    speed_cactus_now = 140;
  else if (score <= 2000)
 80003d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003da:	dd13      	ble.n	8000404 <cactus_work+0x38>
    speed_cactus_now = 100;
  else if (score <= 3000)
    speed_cactus_now = 80;
  else if (score > 3000)
    speed_cactus_now = 40;
 80003dc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80003e0:	4293      	cmp	r3, r2
 80003e2:	bfd4      	ite	le
 80003e4:	2350      	movle	r3, #80	; 0x50
 80003e6:	2328      	movgt	r3, #40	; 0x28


  if (speed_cactus > speed_cactus_now)
 80003e8:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <cactus_work+0x48>)
 80003ea:	6811      	ldr	r1, [r2, #0]
 80003ec:	428b      	cmp	r3, r1
 80003ee:	da0e      	bge.n	800040e <cactus_work+0x42>
  {
    speed_cactus = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	6013      	str	r3, [r2, #0]
    cactus1.x_cactus--;
 80003f4:	4a08      	ldr	r2, [pc, #32]	; (8000418 <cactus_work+0x4c>)
 80003f6:	6813      	ldr	r3, [r2, #0]
    if (cactus1.x_cactus == 0) //after cactus go to the end of display  (x display max=128)
 80003f8:	3b01      	subs	r3, #1
 80003fa:	d005      	beq.n	8000408 <cactus_work+0x3c>
    cactus1.x_cactus--;
 80003fc:	6013      	str	r3, [r2, #0]
 80003fe:	4770      	bx	lr
    speed_cactus_now = 140;
 8000400:	238c      	movs	r3, #140	; 0x8c
 8000402:	e7f1      	b.n	80003e8 <cactus_work+0x1c>
    speed_cactus_now = 100;
 8000404:	2364      	movs	r3, #100	; 0x64
 8000406:	e7ef      	b.n	80003e8 <cactus_work+0x1c>
    {
      cactus1.x_cactus = 122; //cactus appear at start of display
 8000408:	217a      	movs	r1, #122	; 0x7a
      cactus1.fl_cactus_destroy = 0;
 800040a:	6093      	str	r3, [r2, #8]
      cactus1.x_cactus = 122; //cactus appear at start of display
 800040c:	6011      	str	r1, [r2, #0]
 800040e:	4770      	bx	lr
 8000410:	20000034 	.word	0x20000034
 8000414:	20000040 	.word	0x20000040
 8000418:	200004ac 	.word	0x200004ac

0800041c <bird_work>:
void bird_work()
{
  //////////////////////////////////Bird////////////////////////////////////////////////////////////////////////
  int speed_bird_now;
  //////////////////////Increase speed bird by score
  if (score < 4000) // score display= score /10
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <bird_work+0x40>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000424:	db16      	blt.n	8000454 <bird_work+0x38>
    speed_bird_now = 200;
  else if (score <= 5000)
 8000426:	f241 3288 	movw	r2, #5000	; 0x1388
 800042a:	4293      	cmp	r3, r2
 800042c:	dd14      	ble.n	8000458 <bird_work+0x3c>
    speed_bird_now = 150;
  else if (score <= 6000)
    speed_bird_now = 80;
  else if (score > 6000)
    speed_bird_now = 40;
 800042e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000432:	4293      	cmp	r3, r2
 8000434:	bfd4      	ite	le
 8000436:	2350      	movle	r3, #80	; 0x50
 8000438:	2328      	movgt	r3, #40	; 0x28


  if (speed_bird > speed_bird_now)
 800043a:	4a09      	ldr	r2, [pc, #36]	; (8000460 <bird_work+0x44>)
 800043c:	6811      	ldr	r1, [r2, #0]
 800043e:	428b      	cmp	r3, r1
 8000440:	da07      	bge.n	8000452 <bird_work+0x36>
  {
    speed_bird = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	6013      	str	r3, [r2, #0]
    bird1.x_bird--;
 8000446:	4a07      	ldr	r2, [pc, #28]	; (8000464 <bird_work+0x48>)
 8000448:	6813      	ldr	r3, [r2, #0]
    if (bird1.x_bird == 0) //after bird go to the end of display  (x display max=128)
 800044a:	3b01      	subs	r3, #1
    {
      bird1.x_bird = 122; //bird appear at start of display
 800044c:	bf08      	it	eq
 800044e:	237a      	moveq	r3, #122	; 0x7a
 8000450:	6013      	str	r3, [r2, #0]
 8000452:	4770      	bx	lr
    speed_bird_now = 200;
 8000454:	23c8      	movs	r3, #200	; 0xc8
 8000456:	e7f0      	b.n	800043a <bird_work+0x1e>
    speed_bird_now = 150;
 8000458:	2396      	movs	r3, #150	; 0x96
 800045a:	e7ee      	b.n	800043a <bird_work+0x1e>
 800045c:	20000034 	.word	0x20000034
 8000460:	20000038 	.word	0x20000038
 8000464:	200004b8 	.word	0x200004b8

08000468 <bird_wing_work>:
  }
}

void bird_wing_work()
{
  if (speed_bird_wing > 150)
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <bird_wing_work+0x20>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	2a96      	cmp	r2, #150	; 0x96
 800046e:	dd09      	ble.n	8000484 <bird_wing_work+0x1c>
  {
    speed_bird_wing = 0;
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]

    if (bird1.bird_wing == 0)
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <bird_wing_work+0x24>)
 8000476:	6899      	ldr	r1, [r3, #8]
 8000478:	b911      	cbnz	r1, 8000480 <bird_wing_work+0x18>
    {
      bird1.bird_wing = 1;
 800047a:	2201      	movs	r2, #1
    }
    else if (bird1.bird_wing == 1)
    {
      bird1.bird_wing = 0;
 800047c:	609a      	str	r2, [r3, #8]
    }
  }
}
 800047e:	e001      	b.n	8000484 <bird_wing_work+0x1c>
    else if (bird1.bird_wing == 1)
 8000480:	2901      	cmp	r1, #1
 8000482:	d0fb      	beq.n	800047c <bird_wing_work+0x14>
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	2000003c 	.word	0x2000003c
 800048c:	200004b8 	.word	0x200004b8

08000490 <display>:

void display()
{
 8000490:	b573      	push	{r0, r1, r4, r5, r6, lr}

  /////////////////Display//////////////////////////////////////////////////////////
  SH1106_Fill(0x00);                     //clear screen
 8000492:	2000      	movs	r0, #0
 8000494:	f000 fcee 	bl	8000e74 <SH1106_Fill>
  LCD_DrawBitmap(1, 58, 127, 8, ground); //display ground
 8000498:	4b67      	ldr	r3, [pc, #412]	; (8000638 <display+0x1a8>)
 800049a:	227f      	movs	r2, #127	; 0x7f
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	213a      	movs	r1, #58	; 0x3a
 80004a0:	2308      	movs	r3, #8
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fef0 	bl	8001288 <LCD_DrawBitmap>
  LCD_HLine(1, 127, 58);                 ////display line ground
 80004a8:	223a      	movs	r2, #58	; 0x3a
 80004aa:	217f      	movs	r1, #127	; 0x7f
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 fcef 	bl	8000e90 <LCD_HLine>

  if (cactus1.fl_cactus_destroy == 0)
 80004b2:	4b62      	ldr	r3, [pc, #392]	; (800063c <display+0x1ac>)
 80004b4:	689a      	ldr	r2, [r3, #8]
 80004b6:	2a00      	cmp	r2, #0
 80004b8:	f040 8081 	bne.w	80005be <display+0x12e>
    LCD_DrawBitmap(cactus1.x_cactus, cactus1.y_cactus, 6, 16, cactus); //display cactus
 80004bc:	7919      	ldrb	r1, [r3, #4]
 80004be:	7818      	ldrb	r0, [r3, #0]
 80004c0:	4b5f      	ldr	r3, [pc, #380]	; (8000640 <display+0x1b0>)
 80004c2:	2206      	movs	r2, #6
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2310      	movs	r3, #16
  else
    LCD_DrawBitmap(cactus1.x_cactus, cactus1.y_cactus + 9, 3, 7, cactus_dead3x7);
 80004c8:	f000 fede 	bl	8001288 <LCD_DrawBitmap>

  if ((bird1.bird_wing == 1) && (score > 2300))
 80004cc:	4b5d      	ldr	r3, [pc, #372]	; (8000644 <display+0x1b4>)
 80004ce:	4e5e      	ldr	r6, [pc, #376]	; (8000648 <display+0x1b8>)
 80004d0:	689a      	ldr	r2, [r3, #8]
 80004d2:	2a01      	cmp	r2, #1
 80004d4:	d17c      	bne.n	80005d0 <display+0x140>
 80004d6:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80004da:	6831      	ldr	r1, [r6, #0]
 80004dc:	4291      	cmp	r1, r2
 80004de:	dd07      	ble.n	80004f0 <display+0x60>
    LCD_DrawBitmap(bird1.x_bird, bird1.y_bird, 14, 12, bird_down_14x12);
 80004e0:	7919      	ldrb	r1, [r3, #4]
 80004e2:	7818      	ldrb	r0, [r3, #0]
 80004e4:	4b59      	ldr	r3, [pc, #356]	; (800064c <display+0x1bc>)
 80004e6:	220e      	movs	r2, #14
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	230c      	movs	r3, #12
  else if ((bird1.bird_wing == 0) && (score > 2300))
    LCD_DrawBitmap(bird1.x_bird, bird1.y_bird - 6, 14, 12, bird_up_14x12); //display bird
 80004ec:	f000 fecc 	bl	8001288 <LCD_DrawBitmap>

  if (dino1.dino_status == 1) //dino dead
 80004f0:	4c57      	ldr	r4, [pc, #348]	; (8000650 <display+0x1c0>)
 80004f2:	68a3      	ldr	r3, [r4, #8]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d17b      	bne.n	80005f0 <display+0x160>
    LCD_DrawBitmap(dino1.x_dino, dino1.y_dino, 20, 20, googledino20x20_dead);
 80004f8:	7921      	ldrb	r1, [r4, #4]
 80004fa:	7820      	ldrb	r0, [r4, #0]
 80004fc:	4b55      	ldr	r3, [pc, #340]	; (8000654 <display+0x1c4>)
  else if (dino1.fl_dino_foot == 1)
    LCD_DrawBitmap(dino1.x_dino, dino1.y_dino, 20, 20, googledino20x20_right);
  else if (dino1.fl_dino_foot == 0)
    LCD_DrawBitmap(dino1.x_dino, dino1.y_dino, 20, 20, googledino20x20_left); //display dino
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2314      	movs	r3, #20
 8000502:	461a      	mov	r2, r3
 8000504:	f000 fec0 	bl	8001288 <LCD_DrawBitmap>

  if ((sword1.fl_sword == 1) && (sword1.fl_dino_have_sword == 1))
 8000508:	4d53      	ldr	r5, [pc, #332]	; (8000658 <display+0x1c8>)
 800050a:	696b      	ldr	r3, [r5, #20]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d17c      	bne.n	800060a <display+0x17a>
 8000510:	68ab      	ldr	r3, [r5, #8]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d10b      	bne.n	800052e <display+0x9e>
    LCD_DrawBitmap(dino1.x_dino + 15, dino1.y_dino - 1, 13, 13, sword13x13_up); //display sword
 8000516:	4b51      	ldr	r3, [pc, #324]	; (800065c <display+0x1cc>)
 8000518:	6861      	ldr	r1, [r4, #4]
 800051a:	6820      	ldr	r0, [r4, #0]
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	230d      	movs	r3, #13
 8000520:	461a      	mov	r2, r3
 8000522:	3901      	subs	r1, #1
 8000524:	300f      	adds	r0, #15
  else if ((sword1.fl_sword == 0) && (sword1.fl_dino_have_sword == 1))
    LCD_DrawBitmap(dino1.x_dino + 15, dino1.y_dino + 6, 19, 7, sword19x7_down);
 8000526:	b2c9      	uxtb	r1, r1
 8000528:	b2c0      	uxtb	r0, r0
 800052a:	f000 fead 	bl	8001288 <LCD_DrawBitmap>

  if (sword1.fl_sword_must_appear == 1)
 800052e:	692b      	ldr	r3, [r5, #16]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d107      	bne.n	8000544 <display+0xb4>
    LCD_DrawBitmap(sword1.x_sword, sword1.y_sword, 13, 13, sword13x13_up); //display sword to eat
 8000534:	4b49      	ldr	r3, [pc, #292]	; (800065c <display+0x1cc>)
 8000536:	7929      	ldrb	r1, [r5, #4]
 8000538:	7828      	ldrb	r0, [r5, #0]
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	230d      	movs	r3, #13
 800053e:	461a      	mov	r2, r3
 8000540:	f000 fea2 	bl	8001288 <LCD_DrawBitmap>

  LCD_PutStr(85, 2, " HI:", &Font5x7);
  LCD_PutInt(5, 2, score / 10, &Font5x7);    //display score
 8000544:	240a      	movs	r4, #10
  LCD_PutStr(85, 2, " HI:", &Font5x7);
 8000546:	4b46      	ldr	r3, [pc, #280]	; (8000660 <display+0x1d0>)
 8000548:	4a46      	ldr	r2, [pc, #280]	; (8000664 <display+0x1d4>)
 800054a:	2102      	movs	r1, #2
 800054c:	2055      	movs	r0, #85	; 0x55
 800054e:	f000 fe49 	bl	80011e4 <LCD_PutStr>
  LCD_PutInt(5, 2, score / 10, &Font5x7);    //display score
 8000552:	6832      	ldr	r2, [r6, #0]
 8000554:	4b42      	ldr	r3, [pc, #264]	; (8000660 <display+0x1d0>)
 8000556:	fb92 f2f4 	sdiv	r2, r2, r4
 800055a:	2102      	movs	r1, #2
 800055c:	2005      	movs	r0, #5
 800055e:	f000 fe61 	bl	8001224 <LCD_PutInt>
  LCD_PutInt(110, 2, hscore / 10, &Font5x7); //display highest score
 8000562:	4b41      	ldr	r3, [pc, #260]	; (8000668 <display+0x1d8>)
 8000564:	2102      	movs	r1, #2
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	206e      	movs	r0, #110	; 0x6e
 800056a:	fb92 f2f4 	sdiv	r2, r2, r4
 800056e:	4b3c      	ldr	r3, [pc, #240]	; (8000660 <display+0x1d0>)
 8000570:	f000 fe58 	bl	8001224 <LCD_PutInt>

  if (sword1.durable_sword > 0) //display dino have sword time
 8000574:	68ea      	ldr	r2, [r5, #12]
 8000576:	2a00      	cmp	r2, #0
 8000578:	dd0c      	ble.n	8000594 <display+0x104>
  {
    LCD_PutInt(50, 2, sword1.durable_sword / 10, &Font5x7);
 800057a:	4b39      	ldr	r3, [pc, #228]	; (8000660 <display+0x1d0>)
 800057c:	fb92 f2f4 	sdiv	r2, r2, r4
 8000580:	2102      	movs	r1, #2
 8000582:	2032      	movs	r0, #50	; 0x32
 8000584:	f000 fe4e 	bl	8001224 <LCD_PutInt>
    LCD_PutStr(65, 2, "%", &Font5x7);
 8000588:	4b35      	ldr	r3, [pc, #212]	; (8000660 <display+0x1d0>)
 800058a:	4a38      	ldr	r2, [pc, #224]	; (800066c <display+0x1dc>)
 800058c:	2102      	movs	r1, #2
 800058e:	2041      	movs	r0, #65	; 0x41
 8000590:	f000 fe28 	bl	80011e4 <LCD_PutStr>
  }

  if ((score % 1000 == 0) && (fl_invert == 1)) //change day and night
 8000594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000598:	6832      	ldr	r2, [r6, #0]
 800059a:	fb92 f4f3 	sdiv	r4, r2, r3
 800059e:	fb03 2414 	mls	r4, r3, r4, r2
 80005a2:	b93c      	cbnz	r4, 80005b4 <display+0x124>
 80005a4:	4d32      	ldr	r5, [pc, #200]	; (8000670 <display+0x1e0>)
 80005a6:	682b      	ldr	r3, [r5, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d13c      	bne.n	8000626 <display+0x196>
  {
    SH1106_SetInvert(0);
 80005ac:	4620      	mov	r0, r4
 80005ae:	f000 fba3 	bl	8000cf8 <SH1106_SetInvert>
    fl_invert = 0;
 80005b2:	602c      	str	r4, [r5, #0]
  {
    SH1106_SetInvert(1);
    fl_invert = 1;
  }
  SH1106_Flush();
}
 80005b4:	b002      	add	sp, #8
 80005b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SH1106_Flush();
 80005ba:	f000 bc15 	b.w	8000de8 <SH1106_Flush>
    LCD_DrawBitmap(cactus1.x_cactus, cactus1.y_cactus + 9, 3, 7, cactus_dead3x7);
 80005be:	6859      	ldr	r1, [r3, #4]
 80005c0:	7818      	ldrb	r0, [r3, #0]
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <display+0x1e4>)
 80005c4:	3109      	adds	r1, #9
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2203      	movs	r2, #3
 80005ca:	2307      	movs	r3, #7
 80005cc:	b2c9      	uxtb	r1, r1
 80005ce:	e77b      	b.n	80004c8 <display+0x38>
  else if ((bird1.bird_wing == 0) && (score > 2300))
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	d18d      	bne.n	80004f0 <display+0x60>
 80005d4:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80005d8:	6831      	ldr	r1, [r6, #0]
 80005da:	4291      	cmp	r1, r2
 80005dc:	dd88      	ble.n	80004f0 <display+0x60>
    LCD_DrawBitmap(bird1.x_bird, bird1.y_bird - 6, 14, 12, bird_up_14x12); //display bird
 80005de:	6859      	ldr	r1, [r3, #4]
 80005e0:	7818      	ldrb	r0, [r3, #0]
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <display+0x1e8>)
 80005e4:	3906      	subs	r1, #6
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	220e      	movs	r2, #14
 80005ea:	230c      	movs	r3, #12
 80005ec:	b2c9      	uxtb	r1, r1
 80005ee:	e77d      	b.n	80004ec <display+0x5c>
  else if (dino1.fl_dino_foot == 1)
 80005f0:	6923      	ldr	r3, [r4, #16]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d103      	bne.n	80005fe <display+0x16e>
    LCD_DrawBitmap(dino1.x_dino, dino1.y_dino, 20, 20, googledino20x20_right);
 80005f6:	7921      	ldrb	r1, [r4, #4]
 80005f8:	7820      	ldrb	r0, [r4, #0]
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <display+0x1ec>)
 80005fc:	e77f      	b.n	80004fe <display+0x6e>
  else if (dino1.fl_dino_foot == 0)
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d182      	bne.n	8000508 <display+0x78>
    LCD_DrawBitmap(dino1.x_dino, dino1.y_dino, 20, 20, googledino20x20_left); //display dino
 8000602:	7921      	ldrb	r1, [r4, #4]
 8000604:	7820      	ldrb	r0, [r4, #0]
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <display+0x1f0>)
 8000608:	e779      	b.n	80004fe <display+0x6e>
  else if ((sword1.fl_sword == 0) && (sword1.fl_dino_have_sword == 1))
 800060a:	2b00      	cmp	r3, #0
 800060c:	d18f      	bne.n	800052e <display+0x9e>
 800060e:	68ab      	ldr	r3, [r5, #8]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d18c      	bne.n	800052e <display+0x9e>
    LCD_DrawBitmap(dino1.x_dino + 15, dino1.y_dino + 6, 19, 7, sword19x7_down);
 8000614:	6861      	ldr	r1, [r4, #4]
 8000616:	6820      	ldr	r0, [r4, #0]
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <display+0x1f4>)
 800061a:	3106      	adds	r1, #6
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	300f      	adds	r0, #15
 8000620:	2307      	movs	r3, #7
 8000622:	2213      	movs	r2, #19
 8000624:	e77f      	b.n	8000526 <display+0x96>
  else if ((score % 1000 == 0) && (fl_invert == 0))
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1c4      	bne.n	80005b4 <display+0x124>
    SH1106_SetInvert(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fb64 	bl	8000cf8 <SH1106_SetInvert>
    fl_invert = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	602b      	str	r3, [r5, #0]
 8000634:	e7be      	b.n	80005b4 <display+0x124>
 8000636:	bf00      	nop
 8000638:	08002b62 	.word	0x08002b62
 800063c:	200004ac 	.word	0x200004ac
 8000640:	08002a8e 	.word	0x08002a8e
 8000644:	200004b8 	.word	0x200004b8
 8000648:	20000034 	.word	0x20000034
 800064c:	08002a56 	.word	0x08002a56
 8000650:	2000050c 	.word	0x2000050c
 8000654:	08002aae 	.word	0x08002aae
 8000658:	20000568 	.word	0x20000568
 800065c:	08002c0a 	.word	0x08002c0a
 8000660:	080024b7 	.word	0x080024b7
 8000664:	08002aa7 	.word	0x08002aa7
 8000668:	20000030 	.word	0x20000030
 800066c:	08002aac 	.word	0x08002aac
 8000670:	20000000 	.word	0x20000000
 8000674:	08002a9a 	.word	0x08002a9a
 8000678:	08002a72 	.word	0x08002a72
 800067c:	08002b26 	.word	0x08002b26
 8000680:	08002aea 	.word	0x08002aea
 8000684:	08002c24 	.word	0x08002c24

08000688 <dino_dead>:

void dino_dead()
{
 8000688:	b538      	push	{r3, r4, r5, lr}
  LCD_PutStr(30, 20, "GAME OVER", &Font7x10);
 800068a:	4a1e      	ldr	r2, [pc, #120]	; (8000704 <dino_dead+0x7c>)
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <dino_dead+0x80>)
 800068e:	2114      	movs	r1, #20
 8000690:	201e      	movs	r0, #30
 8000692:	f000 fda7 	bl	80011e4 <LCD_PutStr>
  SH1106_Flush();
 8000696:	f000 fba7 	bl	8000de8 <SH1106_Flush>

  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET)
 800069a:	4c1c      	ldr	r4, [pc, #112]	; (800070c <dino_dead+0x84>)
 800069c:	2101      	movs	r1, #1
 800069e:	4620      	mov	r0, r4
 80006a0:	f001 f88c 	bl	80017bc <HAL_GPIO_ReadPin>
 80006a4:	2801      	cmp	r0, #1
 80006a6:	d0f9      	beq.n	800069c <dino_dead+0x14>
    ; //if push button again
      //reset game
  cactus1.x_cactus = 122;
  cactus1.y_cactus = 42; //start position cactus
  cactus1.fl_cactus_destroy = 0;
 80006a8:	2400      	movs	r4, #0
 80006aa:	217a      	movs	r1, #122	; 0x7a
 80006ac:	222a      	movs	r2, #42	; 0x2a
  cactus1.x_cactus = 122;
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <dino_dead+0x88>)

  bird1.x_bird = 110;
  bird1.y_bird = 15;
 80006b0:	206e      	movs	r0, #110	; 0x6e
  cactus1.fl_cactus_destroy = 0;
 80006b2:	e883 0016 	stmia.w	r3, {r1, r2, r4}
  bird1.y_bird = 15;
 80006b6:	220f      	movs	r2, #15
  bird1.x_bird = 110;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <dino_dead+0x8c>)
  bird1.bird_wing = 0; //wing up

  sword1.x_sword = 0;
  sword1.y_sword = 20; //sword appear position
  sword1.fl_sword = 1;
 80006ba:	2501      	movs	r5, #1
  bird1.y_bird = 15;
 80006bc:	e883 0005 	stmia.w	r3, {r0, r2}
  sword1.y_sword = 20; //sword appear position
 80006c0:	2214      	movs	r2, #20
  bird1.bird_wing = 0; //wing up
 80006c2:	609c      	str	r4, [r3, #8]
  sword1.x_sword = 0;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <dino_dead+0x90>)
  sword1.fl_dino_have_sword = 0; //dino do not have sword
  sword1.durable_sword = 0;
  sword1.fl_sword_must_appear = 0;

  dino1.x_dino = 10;
  dino1.y_dino = 38;          //start position dino 20*20
 80006c6:	f04f 0e26 	mov.w	lr, #38	; 0x26
  sword1.y_sword = 20; //sword appear position
 80006ca:	605a      	str	r2, [r3, #4]
  dino1.y_dino = 38;          //start position dino 20*20
 80006cc:	220a      	movs	r2, #10
  sword1.x_sword = 0;
 80006ce:	601c      	str	r4, [r3, #0]
  sword1.fl_dino_have_sword = 0; //dino do not have sword
 80006d0:	609c      	str	r4, [r3, #8]
  sword1.durable_sword = 0;
 80006d2:	60dc      	str	r4, [r3, #12]
  sword1.fl_sword_must_appear = 0;
 80006d4:	611c      	str	r4, [r3, #16]
  sword1.fl_sword = 1;
 80006d6:	615d      	str	r5, [r3, #20]
  dino1.x_dino = 10;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <dino_dead+0x94>)
  dino1.level_jump_dino = -2; //level dino jump/drop
  dino1.dino_status = 0;      // Dino dead or alive, 0= alive, 1=dead
  dino1.fl_dino_foot = 1;

  SH1106_SetInvert(1);
 80006da:	4628      	mov	r0, r5
  dino1.y_dino = 38;          //start position dino 20*20
 80006dc:	e883 4004 	stmia.w	r3, {r2, lr}
  dino1.level_jump_dino = -2; //level dino jump/drop
 80006e0:	f06f 0201 	mvn.w	r2, #1
  dino1.dino_status = 0;      // Dino dead or alive, 0= alive, 1=dead
 80006e4:	609c      	str	r4, [r3, #8]
  dino1.level_jump_dino = -2; //level dino jump/drop
 80006e6:	60da      	str	r2, [r3, #12]
  dino1.fl_dino_foot = 1;
 80006e8:	611d      	str	r5, [r3, #16]
  SH1106_SetInvert(1);
 80006ea:	f000 fb05 	bl	8000cf8 <SH1106_SetInvert>
  fl_invert = 1;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <dino_dead+0x98>)
  if (score > hscore)
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <dino_dead+0x9c>)
  fl_invert = 1;
 80006f2:	601d      	str	r5, [r3, #0]
  if (score > hscore)
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <dino_dead+0xa0>)
 80006f6:	6810      	ldr	r0, [r2, #0]
 80006f8:	6819      	ldr	r1, [r3, #0]
  {
    hscore = score;
  }
  score = 0;
 80006fa:	601c      	str	r4, [r3, #0]
  if (score > hscore)
 80006fc:	4281      	cmp	r1, r0
    hscore = score;
 80006fe:	bfc8      	it	gt
 8000700:	6011      	strgt	r1, [r2, #0]
  score = 0;
 8000702:	bd38      	pop	{r3, r4, r5, pc}
 8000704:	08002a9d 	.word	0x08002a9d
 8000708:	08002699 	.word	0x08002699
 800070c:	40011000 	.word	0x40011000
 8000710:	200004ac 	.word	0x200004ac
 8000714:	200004b8 	.word	0x200004b8
 8000718:	20000568 	.word	0x20000568
 800071c:	2000050c 	.word	0x2000050c
 8000720:	20000000 	.word	0x20000000
 8000724:	20000030 	.word	0x20000030
 8000728:	20000034 	.word	0x20000034

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b500      	push	{lr}
 800072e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000730:	2228      	movs	r2, #40	; 0x28
 8000732:	2100      	movs	r1, #0
 8000734:	a806      	add	r0, sp, #24
 8000736:	f001 fea1 	bl	800247c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073a:	2214      	movs	r2, #20
 800073c:	2100      	movs	r1, #0
 800073e:	a801      	add	r0, sp, #4
 8000740:	f001 fe9c 	bl	800247c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f001 f83f 	bl	80017d4 <HAL_RCC_OscConfig>
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000756:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000758:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800075c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000762:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000766:	f001 fa0f 	bl	8001b88 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800076a:	b011      	add	sp, #68	; 0x44
 800076c:	f85d fb04 	ldr.w	pc, [sp], #4

08000770 <main>:
{
 8000770:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000774:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000776:	f000 fea7 	bl	80014c8 <HAL_Init>
  SystemClock_Config();
 800077a:	f7ff ffd7 	bl	800072c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	2210      	movs	r2, #16
 8000780:	2100      	movs	r1, #0
 8000782:	a808      	add	r0, sp, #32
 8000784:	f001 fe7a 	bl	800247c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000788:	4b9b      	ldr	r3, [pc, #620]	; (80009f8 <main+0x288>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin | DC_Pin, GPIO_PIN_RESET);
 800078a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, CS_Pin | DC_Pin, GPIO_PIN_RESET);
 8000790:	489a      	ldr	r0, [pc, #616]	; (80009fc <main+0x28c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	f042 0210 	orr.w	r2, r2, #16
 8000796:	619a      	str	r2, [r3, #24]
 8000798:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079c:	f002 0210 	and.w	r2, r2, #16
 80007a0:	9202      	str	r2, [sp, #8]
 80007a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin | BUTTON_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a6:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a8:	f042 0220 	orr.w	r2, r2, #32
 80007ac:	619a      	str	r2, [r3, #24]
 80007ae:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin | DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	f002 0220 	and.w	r2, r2, #32
 80007b6:	9203      	str	r2, [sp, #12]
 80007b8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007bc:	f44f 7980 	mov.w	r9, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	f042 0208 	orr.w	r2, r2, #8
 80007c4:	619a      	str	r2, [r3, #24]
 80007c6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c8:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007cc:	f002 0208 	and.w	r2, r2, #8
 80007d0:	9204      	str	r2, [sp, #16]
 80007d2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	699a      	ldr	r2, [r3, #24]
  hspi2.Init.CRCPolynomial = 10;
 80007d6:	f04f 080a 	mov.w	r8, #10
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	f042 0204 	orr.w	r2, r2, #4
 80007de:	619a      	str	r2, [r3, #24]
 80007e0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, CS_Pin | DC_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	9305      	str	r3, [sp, #20]
 80007ea:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, CS_Pin | DC_Pin, GPIO_PIN_RESET);
 80007ec:	f000 ffec 	bl	80017c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <main+0x290>)
 80007f6:	f000 ffe7 	bl	80017c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	4880      	ldr	r0, [pc, #512]	; (8000a04 <main+0x294>)
 8000802:	f000 ffe1 	bl	80017c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2104      	movs	r1, #4
 800080a:	487f      	ldr	r0, [pc, #508]	; (8000a08 <main+0x298>)
 800080c:	f000 ffdc 	bl	80017c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_1;
 8000810:	f242 0302 	movw	r3, #8194	; 0x2002
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	a908      	add	r1, sp, #32
 8000816:	487a      	ldr	r0, [pc, #488]	; (8000a00 <main+0x290>)
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_1;
 8000818:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	f000 fee1 	bl	80015e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_2_Pin | BUTTON_1_Pin;
 8000822:	2381      	movs	r3, #129	; 0x81
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	a908      	add	r1, sp, #32
 8000826:	4876      	ldr	r0, [pc, #472]	; (8000a00 <main+0x290>)
  GPIO_InitStruct.Pin = BUTTON_2_Pin | BUTTON_1_Pin;
 8000828:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082c:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f000 fed9 	bl	80015e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_Pin | DC_Pin;
 8000832:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	a908      	add	r1, sp, #32
 8000838:	4870      	ldr	r0, [pc, #448]	; (80009fc <main+0x28c>)
  GPIO_InitStruct.Pin = CS_Pin | DC_Pin;
 800083a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f000 fecf 	bl	80015e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8000846:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8000848:	a908      	add	r1, sp, #32
 800084a:	486d      	ldr	r0, [pc, #436]	; (8000a00 <main+0x290>)
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 800084c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8000854:	f000 fec6 	bl	80015e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	a908      	add	r1, sp, #32
 800085a:	486a      	ldr	r0, [pc, #424]	; (8000a04 <main+0x294>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000862:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f000 febd 	bl	80015e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086a:	a908      	add	r1, sp, #32
 800086c:	4866      	ldr	r0, [pc, #408]	; (8000a08 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000874:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f000 feb4 	bl	80015e4 <HAL_GPIO_Init>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800087c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Instance = SPI2;
 8000880:	4862      	ldr	r0, [pc, #392]	; (8000a0c <main+0x29c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000882:	4a63      	ldr	r2, [pc, #396]	; (8000a10 <main+0x2a0>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000884:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000886:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800088a:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800088e:	60c4      	str	r4, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000890:	6183      	str	r3, [r0, #24]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000892:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000896:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000898:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800089a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800089e:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008a2:	f001 fa73 	bl	8001d8c <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	4621      	mov	r1, r4
 80008a8:	2210      	movs	r2, #16
 80008aa:	a808      	add	r0, sp, #32
 80008ac:	f001 fde6 	bl	800247c <memset>
  htim1.Instance = TIM1;
 80008b0:	4d58      	ldr	r5, [pc, #352]	; (8000a14 <main+0x2a4>)
 80008b2:	4b59      	ldr	r3, [pc, #356]	; (8000a18 <main+0x2a8>)
  htim1.Init.Period = 200;
 80008b4:	22c8      	movs	r2, #200	; 0xc8
  htim1.Instance = TIM1;
 80008b6:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 7;
 80008b8:	2307      	movs	r3, #7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008be:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 7;
 80008c0:	606b      	str	r3, [r5, #4]
 80008c2:	9301      	str	r3, [sp, #4]
  htim1.Init.Period = 200;
 80008c4:	60ea      	str	r2, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ca:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	9406      	str	r4, [sp, #24]
 80008d0:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008d2:	f001 fc83 	bl	80021dc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d6:	a908      	add	r1, sp, #32
 80008d8:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008da:	f8cd b020 	str.w	fp, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008de:	f001 fcb3 	bl	8002248 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e2:	a906      	add	r1, sp, #24
 80008e4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ea:	f001 fd41 	bl	8002370 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	4621      	mov	r1, r4
 80008f0:	2210      	movs	r2, #16
 80008f2:	a808      	add	r0, sp, #32
 80008f4:	f001 fdc2 	bl	800247c <memset>
  htim2.Instance = TIM2;
 80008f8:	4f48      	ldr	r7, [pc, #288]	; (8000a1c <main+0x2ac>)
  htim2.Init.Prescaler = 7;
 80008fa:	9b01      	ldr	r3, [sp, #4]
  htim2.Instance = TIM2;
 80008fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 7;
 8000900:	607b      	str	r3, [r7, #4]
  htim2.Init.Period = 50;
 8000902:	2332      	movs	r3, #50	; 0x32
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000904:	4638      	mov	r0, r7
  htim2.Init.Period = 50;
 8000906:	60fb      	str	r3, [r7, #12]
  htim2.Instance = TIM2;
 8000908:	603a      	str	r2, [r7, #0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	60bc      	str	r4, [r7, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	61bc      	str	r4, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	9406      	str	r4, [sp, #24]
 8000912:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000914:	f001 fc62 	bl	80021dc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000918:	a908      	add	r1, sp, #32
 800091a:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091c:	f8cd b020 	str.w	fp, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000920:	f001 fc92 	bl	8002248 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000924:	a906      	add	r1, sp, #24
 8000926:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800092c:	f001 fd20 	bl	8002370 <HAL_TIMEx_MasterConfigSynchronization>
  SH1106_Init();
 8000930:	f000 f978 	bl	8000c24 <SH1106_Init>
  HAL_TIM_Base_Init(&htim1);
 8000934:	4628      	mov	r0, r5
 8000936:	f001 fc51 	bl	80021dc <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800093a:	4628      	mov	r0, r5
 800093c:	f001 fb2a 	bl	8001f94 <HAL_TIM_Base_Start_IT>
  SH1106_SetInvert(1);
 8000940:	4630      	mov	r0, r6
 8000942:	f000 f9d9 	bl	8000cf8 <SH1106_SetInvert>
  SH1106_Contrast(100);
 8000946:	2064      	movs	r0, #100	; 0x64
 8000948:	f000 f9be 	bl	8000cc8 <SH1106_Contrast>
  SH1106_Orientation(0);
 800094c:	4620      	mov	r0, r4
 800094e:	f000 fa1b 	bl	8000d88 <SH1106_Orientation>
  SH1106_Flush();
 8000952:	f000 fa49 	bl	8000de8 <SH1106_Flush>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000956:	4632      	mov	r2, r6
 8000958:	4651      	mov	r1, sl
 800095a:	482b      	ldr	r0, [pc, #172]	; (8000a08 <main+0x298>)
 800095c:	f000 ff34 	bl	80017c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000960:	4632      	mov	r2, r6
 8000962:	4828      	ldr	r0, [pc, #160]	; (8000a04 <main+0x294>)
 8000964:	4649      	mov	r1, r9
 8000966:	f000 ff2f 	bl	80017c8 <HAL_GPIO_WritePin>
  cactus1.y_cactus = 42; //start position cactus
 800096a:	222a      	movs	r2, #42	; 0x2a
 800096c:	207a      	movs	r0, #122	; 0x7a
  cactus1.x_cactus = 122;
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <main+0x2b0>)
  bird1.y_bird = 15;
 8000970:	250f      	movs	r5, #15
  cactus1.y_cactus = 42; //start position cactus
 8000972:	e883 0005 	stmia.w	r3, {r0, r2}
  bird1.y_bird = 15;
 8000976:	226e      	movs	r2, #110	; 0x6e
  cactus1.fl_cactus_destroy = 0;
 8000978:	609c      	str	r4, [r3, #8]
  bird1.x_bird = 110;
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <main+0x2b4>)
  bird1.y_bird = 15;
 800097c:	e883 0024 	stmia.w	r3, {r2, r5}
  sword1.y_sword = 20; //sword appear position
 8000980:	2214      	movs	r2, #20
  bird1.bird_wing = 0; //wing up
 8000982:	609c      	str	r4, [r3, #8]
  sword1.x_sword = 0;
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <main+0x2b8>)
    if (speed_dino > 80)
 8000986:	4d29      	ldr	r5, [pc, #164]	; (8000a2c <main+0x2bc>)
  sword1.y_sword = 20; //sword appear position
 8000988:	605a      	str	r2, [r3, #4]
  dino1.y_dino = 38;          //start position dino 20*20
 800098a:	2226      	movs	r2, #38	; 0x26
  sword1.x_sword = 0;
 800098c:	601c      	str	r4, [r3, #0]
  sword1.fl_dino_have_sword = 0; //dino do not have sword
 800098e:	609c      	str	r4, [r3, #8]
  sword1.durable_sword = 0;
 8000990:	60dc      	str	r4, [r3, #12]
  sword1.fl_sword_must_appear = 0;
 8000992:	611c      	str	r4, [r3, #16]
  sword1.fl_sword = 1;
 8000994:	615e      	str	r6, [r3, #20]
  dino1.x_dino = 10;
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <main+0x2c0>)
  dino1.fl_dino_foot = 1;
 8000998:	611e      	str	r6, [r3, #16]
    if (score > 2300)
 800099a:	4e26      	ldr	r6, [pc, #152]	; (8000a34 <main+0x2c4>)
  dino1.y_dino = 38;          //start position dino 20*20
 800099c:	605a      	str	r2, [r3, #4]
  dino1.level_jump_dino = -2; //level dino jump/drop
 800099e:	f06f 0201 	mvn.w	r2, #1
  dino1.dino_status = 0;      // Dino dead or alive, 0= alive, 1=dead
 80009a2:	609c      	str	r4, [r3, #8]
 80009a4:	4637      	mov	r7, r6
 80009a6:	461c      	mov	r4, r3
  dino1.x_dino = 10;
 80009a8:	f8c3 8000 	str.w	r8, [r3]
  dino1.level_jump_dino = -2; //level dino jump/drop
 80009ac:	60da      	str	r2, [r3, #12]
    if (speed_dino > 80)
 80009ae:	682b      	ldr	r3, [r5, #0]
 80009b0:	2b50      	cmp	r3, #80	; 0x50
 80009b2:	dd03      	ble.n	80009bc <main+0x24c>
      speed_dino = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	602b      	str	r3, [r5, #0]
      dino_work();
 80009b8:	f7ff fc5a 	bl	8000270 <dino_work>
    sword_work();
 80009bc:	f7ff fc9e 	bl	80002fc <sword_work>
    cactus_work();
 80009c0:	f7ff fd04 	bl	80003cc <cactus_work>
    if (score > 2300)
 80009c4:	f640 03fc 	movw	r3, #2300	; 0x8fc
 80009c8:	6832      	ldr	r2, [r6, #0]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dd03      	ble.n	80009d6 <main+0x266>
      bird_work();
 80009ce:	f7ff fd25 	bl	800041c <bird_work>
      bird_wing_work();
 80009d2:	f7ff fd49 	bl	8000468 <bird_wing_work>
    if (speed_score_and_display > 50)
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <main+0x2c8>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	2a32      	cmp	r2, #50	; 0x32
 80009dc:	dd06      	ble.n	80009ec <main+0x27c>
      speed_score_and_display = 0;
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
      score++;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	603b      	str	r3, [r7, #0]
      display();
 80009e8:	f7ff fd52 	bl	8000490 <display>
    if (dino1.dino_status == 1)
 80009ec:	68a3      	ldr	r3, [r4, #8]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d1dd      	bne.n	80009ae <main+0x23e>
      dino_dead();
 80009f2:	f7ff fe49 	bl	8000688 <dino_dead>
 80009f6:	e7da      	b.n	80009ae <main+0x23e>
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	40011000 	.word	0x40011000
 8000a04:	40010800 	.word	0x40010800
 8000a08:	40011400 	.word	0x40011400
 8000a0c:	20000454 	.word	0x20000454
 8000a10:	40003800 	.word	0x40003800
 8000a14:	200004c4 	.word	0x200004c4
 8000a18:	40012c00 	.word	0x40012c00
 8000a1c:	20000520 	.word	0x20000520
 8000a20:	200004ac 	.word	0x200004ac
 8000a24:	200004b8 	.word	0x200004b8
 8000a28:	20000568 	.word	0x20000568
 8000a2c:	20000044 	.word	0x20000044
 8000a30:	2000050c 	.word	0x2000050c
 8000a34:	20000034 	.word	0x20000034
 8000a38:	20000048 	.word	0x20000048

08000a3c <LCD_HLineInt>:
	uint8_t *ptr;
	uint8_t mask;

	// Pointer to the first byte of line in video buffer
	// This is optimized formula, original is "((Y >> 3) * SCR_W) + X"
	ptr = &vRAM[((Y >> 3) << 7)] + X;
 8000a3c:	08cb      	lsrs	r3, r1, #3
 8000a3e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <LCD_HLineInt+0x5c>)
 8000a44:	4418      	add	r0, r3

	// Mask bit for pixel in byte
	mask = 1 << (Y & 0x07);
 8000a46:	f001 0307 	and.w	r3, r1, #7
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4099      	lsls	r1, r3

	// Draw line
	switch (LCD_PixelMode) {
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <LCD_HLineInt+0x60>)
	mask = 1 << (Y & 0x07);
 8000a50:	b2c9      	uxtb	r1, r1
	switch (LCD_PixelMode) {
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4402      	add	r2, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d004      	beq.n	8000a64 <LCD_HLineInt+0x28>
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d012      	beq.n	8000a84 <LCD_HLineInt+0x48>
			break;
		case LCD_PINV:
			while (W--) *ptr++ ^= mask;
			break;
		default:
			while (W--) *ptr++ |= mask;
 8000a5e:	4290      	cmp	r0, r2
 8000a60:	d113      	bne.n	8000a8a <LCD_HLineInt+0x4e>
 8000a62:	4770      	bx	lr
			mask = ~mask;
 8000a64:	43c9      	mvns	r1, r1
 8000a66:	b2c9      	uxtb	r1, r1
			while (W--) *ptr++ &= mask;
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	d100      	bne.n	8000a6e <LCD_HLineInt+0x32>
 8000a6c:	4770      	bx	lr
 8000a6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a72:	400b      	ands	r3, r1
 8000a74:	f800 3c01 	strb.w	r3, [r0, #-1]
 8000a78:	e7f6      	b.n	8000a68 <LCD_HLineInt+0x2c>
			while (W--) *ptr++ ^= mask;
 8000a7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a7e:	404b      	eors	r3, r1
 8000a80:	f800 3c01 	strb.w	r3, [r0, #-1]
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d1f8      	bne.n	8000a7a <LCD_HLineInt+0x3e>
 8000a88:	4770      	bx	lr
			while (W--) *ptr++ |= mask;
 8000a8a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	f800 3c01 	strb.w	r3, [r0, #-1]
 8000a94:	e7e3      	b.n	8000a5e <LCD_HLineInt+0x22>
 8000a96:	bf00      	nop
 8000a98:	20000054 	.word	0x20000054
 8000a9c:	20000050 	.word	0x20000050

08000aa0 <LCD_VLineInt>:
// Optimized draw vertical line (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line length
static void LCD_VLineInt(uint8_t X, uint8_t Y, uint8_t H) {
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t mask;
	uint8_t modulo;

	// Pointer to the first byte of line in video buffer
	// This is optimized formula, original is "((Y >> 3) * SCR_W) + X"
	ptr = &vRAM[((Y >> 3) << 7)] + X;
 8000aa2:	08cb      	lsrs	r3, r1, #3
 8000aa4:	4d44      	ldr	r5, [pc, #272]	; (8000bb8 <LCD_VLineInt+0x118>)
 8000aa6:	eb00 10c3 	add.w	r0, r0, r3, lsl #7

	// First partial byte?
	modulo = (Y & 0x07);
	if (modulo) {
 8000aaa:	f011 0107 	ands.w	r1, r1, #7
	ptr = &vRAM[((Y >> 3) << 7)] + X;
 8000aae:	eb05 0400 	add.w	r4, r5, r0
	if (modulo) {
 8000ab2:	d01d      	beq.n	8000af0 <LCD_VLineInt+0x50>
		// Get bit mask for first partial byte from lookup table
		modulo = 8 - modulo;
 8000ab4:	f1c1 0108 	rsb	r1, r1, #8
 8000ab8:	b2c9      	uxtb	r1, r1
		mask = LUT_FB[modulo];

		// Trim mask if line is will not go out from a current byte
		if (modulo > H) mask &= (0xFF >> (modulo - H));
 8000aba:	428a      	cmp	r2, r1
 8000abc:	bf38      	it	cc
 8000abe:	26ff      	movcc	r6, #255	; 0xff
		mask = LUT_FB[modulo];
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <LCD_VLineInt+0x11c>)
		if (modulo > H) mask &= (0xFF >> (modulo - H));
 8000ac2:	bf38      	it	cc
 8000ac4:	1a8f      	subcc	r7, r1, r2
		mask = LUT_FB[modulo];
 8000ac6:	5c5b      	ldrb	r3, [r3, r1]
		if (modulo > H) mask &= (0xFF >> (modulo - H));
 8000ac8:	bf3c      	itt	cc
 8000aca:	413e      	asrcc	r6, r7
 8000acc:	4033      	andcc	r3, r6

		// Modify bits in first byte of line
		switch (LCD_PixelMode) {
 8000ace:	4e3c      	ldr	r6, [pc, #240]	; (8000bc0 <LCD_VLineInt+0x120>)
 8000ad0:	7837      	ldrb	r7, [r6, #0]
 8000ad2:	5c2e      	ldrb	r6, [r5, r0]
 8000ad4:	2f01      	cmp	r7, #1
 8000ad6:	d003      	beq.n	8000ae0 <LCD_VLineInt+0x40>
 8000ad8:	2f02      	cmp	r7, #2
 8000ada:	d032      	beq.n	8000b42 <LCD_VLineInt+0xa2>
				break;
			case LCD_PINV:
				*ptr ^=  mask;
				break;
			default:
				*ptr |=  mask;
 8000adc:	4333      	orrs	r3, r6
 8000ade:	e001      	b.n	8000ae4 <LCD_VLineInt+0x44>
				*ptr &= ~mask;
 8000ae0:	ea26 0303 	bic.w	r3, r6, r3
				break;
		}

		// Return if line is over
		if (modulo > H) return;
 8000ae4:	428a      	cmp	r2, r1
				*ptr |=  mask;
 8000ae6:	542b      	strb	r3, [r5, r0]
		if (modulo > H) return;
 8000ae8:	d358      	bcc.n	8000b9c <LCD_VLineInt+0xfc>

		// Shift pointer to the next byte in line and decrease line height counter
		ptr += SCR_W;
		H   -= modulo;
 8000aea:	1a52      	subs	r2, r2, r1
		ptr += SCR_W;
 8000aec:	3480      	adds	r4, #128	; 0x80
		H   -= modulo;
 8000aee:	b2d2      	uxtb	r2, r2
	}

	// Fill solid bytes
	if (H > 7) {
 8000af0:	2a07      	cmp	r2, #7
 8000af2:	d91a      	bls.n	8000b2a <LCD_VLineInt+0x8a>
		// Separate cycle for each case of pixel mode (to improve performance)
		switch (LCD_PixelMode) {
 8000af4:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <LCD_VLineInt+0x120>)
 8000af6:	7819      	ldrb	r1, [r3, #0]
 8000af8:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8000afc:	2901      	cmp	r1, #1
 8000afe:	d022      	beq.n	8000b46 <LCD_VLineInt+0xa6>
 8000b00:	2902      	cmp	r1, #2
 8000b02:	d035      	beq.n	8000b70 <LCD_VLineInt+0xd0>
 8000b04:	4611      	mov	r1, r2
					H   -= 8;
				} while (H > 7);
				break;
			default:
				do {
					*ptr = 0xFF;
 8000b06:	20ff      	movs	r0, #255	; 0xff
					ptr += SCR_W;
					H   -= 8;
 8000b08:	3908      	subs	r1, #8
 8000b0a:	b2c9      	uxtb	r1, r1
				} while (H > 7);
 8000b0c:	2907      	cmp	r1, #7
					*ptr = 0xFF;
 8000b0e:	f803 0c80 	strb.w	r0, [r3, #-128]
 8000b12:	f103 0380 	add.w	r3, r3, #128	; 0x80
				} while (H > 7);
 8000b16:	d8f7      	bhi.n	8000b08 <LCD_VLineInt+0x68>
 8000b18:	f1a2 0308 	sub.w	r3, r2, #8
 8000b1c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8000b20:	3301      	adds	r3, #1
 8000b22:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
 8000b26:	f002 0207 	and.w	r2, r2, #7
				break;
		}
	}

	// Last partial byte?
	if (H) {
 8000b2a:	b3ba      	cbz	r2, 8000b9c <LCD_VLineInt+0xfc>
		// Get bit mask for last partial byte from lookup table
		modulo = (H & 0x07);
		mask   = LUT_LB[modulo];
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <LCD_VLineInt+0x124>)
 8000b2e:	5c9b      	ldrb	r3, [r3, r2]

		// Modify bits in last byte of line
		switch (LCD_PixelMode) {
 8000b30:	4a23      	ldr	r2, [pc, #140]	; (8000bc0 <LCD_VLineInt+0x120>)
 8000b32:	7812      	ldrb	r2, [r2, #0]
 8000b34:	2a01      	cmp	r2, #1
 8000b36:	d037      	beq.n	8000ba8 <LCD_VLineInt+0x108>
 8000b38:	2a02      	cmp	r2, #2
 8000b3a:	d130      	bne.n	8000b9e <LCD_VLineInt+0xfe>
			case LCD_PRES:
				*ptr &= ~mask;
				break;
			case LCD_PINV:
				*ptr ^=  mask;
 8000b3c:	7822      	ldrb	r2, [r4, #0]
 8000b3e:	4053      	eors	r3, r2
 8000b40:	e035      	b.n	8000bae <LCD_VLineInt+0x10e>
				*ptr ^=  mask;
 8000b42:	4073      	eors	r3, r6
 8000b44:	e7ce      	b.n	8000ae4 <LCD_VLineInt+0x44>
		switch (LCD_PixelMode) {
 8000b46:	4611      	mov	r1, r2
					*ptr = 0x00;
 8000b48:	2000      	movs	r0, #0
					H   -= 8;
 8000b4a:	3908      	subs	r1, #8
 8000b4c:	b2c9      	uxtb	r1, r1
				} while (H > 7);
 8000b4e:	2907      	cmp	r1, #7
					*ptr = 0x00;
 8000b50:	f803 0c80 	strb.w	r0, [r3, #-128]
 8000b54:	f103 0380 	add.w	r3, r3, #128	; 0x80
				} while (H > 7);
 8000b58:	d8f7      	bhi.n	8000b4a <LCD_VLineInt+0xaa>
 8000b5a:	f1a2 0308 	sub.w	r3, r2, #8
 8000b5e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8000b62:	3301      	adds	r3, #1
	if (H) {
 8000b64:	f012 0207 	ands.w	r2, r2, #7
 8000b68:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
 8000b6c:	d11a      	bne.n	8000ba4 <LCD_VLineInt+0x104>
 8000b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (LCD_PixelMode) {
 8000b70:	4611      	mov	r1, r2
					*ptr = ~(*ptr);
 8000b72:	f813 0c80 	ldrb.w	r0, [r3, #-128]
					H   -= 8;
 8000b76:	3908      	subs	r1, #8
					*ptr = ~(*ptr);
 8000b78:	43c0      	mvns	r0, r0
					H   -= 8;
 8000b7a:	b2c9      	uxtb	r1, r1
				} while (H > 7);
 8000b7c:	2907      	cmp	r1, #7
					*ptr = ~(*ptr);
 8000b7e:	f803 0c80 	strb.w	r0, [r3, #-128]
 8000b82:	f103 0380 	add.w	r3, r3, #128	; 0x80
				} while (H > 7);
 8000b86:	d8f4      	bhi.n	8000b72 <LCD_VLineInt+0xd2>
 8000b88:	f1a2 0308 	sub.w	r3, r2, #8
 8000b8c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8000b90:	3301      	adds	r3, #1
	if (H) {
 8000b92:	f012 0207 	ands.w	r2, r2, #7
 8000b96:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
 8000b9a:	d10a      	bne.n	8000bb2 <LCD_VLineInt+0x112>
 8000b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				break;
			default:
				*ptr |=  mask;
 8000b9e:	7822      	ldrb	r2, [r4, #0]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	e004      	b.n	8000bae <LCD_VLineInt+0x10e>
		mask   = LUT_LB[modulo];
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <LCD_VLineInt+0x124>)
 8000ba6:	5c9b      	ldrb	r3, [r3, r2]
				*ptr &= ~mask;
 8000ba8:	7822      	ldrb	r2, [r4, #0]
 8000baa:	ea22 0303 	bic.w	r3, r2, r3
				*ptr |=  mask;
 8000bae:	7023      	strb	r3, [r4, #0]
				break;
 8000bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mask   = LUT_LB[modulo];
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <LCD_VLineInt+0x124>)
 8000bb4:	5c9b      	ldrb	r3, [r3, r2]
 8000bb6:	e7c1      	b.n	8000b3c <LCD_VLineInt+0x9c>
 8000bb8:	20000054 	.word	0x20000054
 8000bbc:	08002c37 	.word	0x08002c37
 8000bc0:	20000050 	.word	0x20000050
 8000bc4:	08002c3f 	.word	0x08002c3f

08000bc8 <SH1106_cmd_double>:
static void SH1106_cmd_double(uint8_t cmd1, uint8_t cmd2) {
 8000bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bca:	4605      	mov	r5, r0
 8000bcc:	460c      	mov	r4, r1
	SH1106_DC_L();
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <SH1106_cmd_double+0x28>)
 8000bd4:	f000 fdf8 	bl	80017c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit ( &SH1106_SPI_PORT,  command, 2, 20) ;
 8000bd8:	2314      	movs	r3, #20
 8000bda:	2202      	movs	r2, #2
 8000bdc:	a901      	add	r1, sp, #4
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <SH1106_cmd_double+0x2c>)
	command[0] = cmd1;
 8000be0:	f88d 5004 	strb.w	r5, [sp, #4]
	command[1] = cmd2;
 8000be4:	f88d 4005 	strb.w	r4, [sp, #5]
	HAL_SPI_Transmit ( &SH1106_SPI_PORT,  command, 2, 20) ;
 8000be8:	f001 f928 	bl	8001e3c <HAL_SPI_Transmit>
}
 8000bec:	b003      	add	sp, #12
 8000bee:	bd30      	pop	{r4, r5, pc}
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	20000454 	.word	0x20000454

08000bf8 <SH1106_cmd>:
static void SH1106_cmd(uint8_t cmd) {
 8000bf8:	b513      	push	{r0, r1, r4, lr}
 8000bfa:	4604      	mov	r4, r0
	SH1106_DC_L();
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <SH1106_cmd+0x24>)
 8000c02:	f000 fde1 	bl	80017c8 <HAL_GPIO_WritePin>
	uint8_t command = cmd;
 8000c06:	a902      	add	r1, sp, #8
 8000c08:	f801 4d01 	strb.w	r4, [r1, #-1]!
	HAL_SPI_Transmit ( &SH1106_SPI_PORT,  &command, 1, 20) ;
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <SH1106_cmd+0x28>)
 8000c12:	f001 f913 	bl	8001e3c <HAL_SPI_Transmit>
}
 8000c16:	b002      	add	sp, #8
 8000c18:	bd10      	pop	{r4, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40011000 	.word	0x40011000
 8000c20:	20000454 	.word	0x20000454

08000c24 <SH1106_Init>:
void SH1106_Init(void) {
 8000c24:	b510      	push	{r4, lr}
	SH1106_CS_H();
 8000c26:	4c27      	ldr	r4, [pc, #156]	; (8000cc4 <SH1106_Init+0xa0>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	f000 fdca 	bl	80017c8 <HAL_GPIO_WritePin>
	SH1106_RST_L();
 8000c34:	4620      	mov	r0, r4
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3c:	f000 fdc4 	bl	80017c8 <HAL_GPIO_WritePin>
	SH1106_RST_H();
 8000c40:	4620      	mov	r0, r4
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c48:	f000 fdbe 	bl	80017c8 <HAL_GPIO_WritePin>
	SH1106_CS_L();
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c54:	f000 fdb8 	bl	80017c8 <HAL_GPIO_WritePin>
	SH1106_cmd_double(SH1106_CMD_SETMUX,0x3F); // 64MUX
 8000c58:	213f      	movs	r1, #63	; 0x3f
 8000c5a:	20a8      	movs	r0, #168	; 0xa8
 8000c5c:	f7ff ffb4 	bl	8000bc8 <SH1106_cmd_double>
	SH1106_cmd_double(SH1106_CMD_SETOFFS,0x00); // Offset: 0
 8000c60:	2100      	movs	r1, #0
 8000c62:	20d3      	movs	r0, #211	; 0xd3
 8000c64:	f7ff ffb0 	bl	8000bc8 <SH1106_cmd_double>
	SH1106_cmd(SH1106_CMD_STARTLINE | 0x00); // Start line: 0
 8000c68:	2040      	movs	r0, #64	; 0x40
 8000c6a:	f7ff ffc5 	bl	8000bf8 <SH1106_cmd>
	SH1106_cmd(SH1106_CMD_SEG_NORM);
 8000c6e:	20a0      	movs	r0, #160	; 0xa0
 8000c70:	f7ff ffc2 	bl	8000bf8 <SH1106_cmd>
	SH1106_cmd(SH1106_CMD_COM_NORM);
 8000c74:	20c0      	movs	r0, #192	; 0xc0
 8000c76:	f7ff ffbf 	bl	8000bf8 <SH1106_cmd>
	SH1106_cmd_double(SH1106_CMD_COM_HW,0x12);
 8000c7a:	2112      	movs	r1, #18
 8000c7c:	20da      	movs	r0, #218	; 0xda
 8000c7e:	f7ff ffa3 	bl	8000bc8 <SH1106_cmd_double>
	SH1106_cmd_double(SH1106_CMD_CHARGE, dis_charge | (pre_charge << 4));
 8000c82:	2100      	movs	r1, #0
 8000c84:	2022      	movs	r0, #34	; 0x22
 8000c86:	f7ff ff9f 	bl	8000bc8 <SH1106_cmd_double>
	SH1106_cmd_double(SH1106_CMD_CONTRAST, 0x0F); // Contrast: middle level
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	2081      	movs	r0, #129	; 0x81
 8000c8e:	f7ff ff9b 	bl	8000bc8 <SH1106_cmd_double>
	SH1106_cmd(0x30);
 8000c92:	2030      	movs	r0, #48	; 0x30
 8000c94:	f7ff ffb0 	bl	8000bf8 <SH1106_cmd>
	SH1106_cmd(SH1106_CMD_EDOFF); // Display follows RAM content
 8000c98:	20a4      	movs	r0, #164	; 0xa4
 8000c9a:	f7ff ffad 	bl	8000bf8 <SH1106_cmd>
	SH1106_cmd(SH1106_CMD_INV_OFF); // Normal display mode
 8000c9e:	20a6      	movs	r0, #166	; 0xa6
 8000ca0:	f7ff ffaa 	bl	8000bf8 <SH1106_cmd>
	SH1106_cmd_double(SH1106_CMD_CLOCKDIV,0xF0);
 8000ca4:	21f0      	movs	r1, #240	; 0xf0
 8000ca6:	20d5      	movs	r0, #213	; 0xd5
 8000ca8:	f7ff ff8e 	bl	8000bc8 <SH1106_cmd_double>
	SH1106_cmd(SH1106_CMD_DISP_ON); // Display enabled
 8000cac:	20af      	movs	r0, #175	; 0xaf
 8000cae:	f7ff ffa3 	bl	8000bf8 <SH1106_cmd>
	SH1106_CS_H();
 8000cb2:	4620      	mov	r0, r4
}
 8000cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SH1106_CS_H();
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cbe:	f000 bd83 	b.w	80017c8 <HAL_GPIO_WritePin>
 8000cc2:	bf00      	nop
 8000cc4:	40010c00 	.word	0x40010c00

08000cc8 <SH1106_Contrast>:
void SH1106_Contrast(uint8_t contrast) {
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	4605      	mov	r5, r0
	SH1106_CS_L();
 8000ccc:	4c09      	ldr	r4, [pc, #36]	; (8000cf4 <SH1106_Contrast+0x2c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd6:	f000 fd77 	bl	80017c8 <HAL_GPIO_WritePin>
	SH1106_cmd_double(SH1106_CMD_CONTRAST,contrast);
 8000cda:	4629      	mov	r1, r5
 8000cdc:	2081      	movs	r0, #129	; 0x81
 8000cde:	f7ff ff73 	bl	8000bc8 <SH1106_cmd_double>
	SH1106_CS_H();
 8000ce2:	4620      	mov	r0, r4
}
 8000ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SH1106_CS_H();
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cee:	f000 bd6b 	b.w	80017c8 <HAL_GPIO_WritePin>
 8000cf2:	bf00      	nop
 8000cf4:	40010c00 	.word	0x40010c00

08000cf8 <SH1106_SetInvert>:
void SH1106_SetInvert(uint8_t inv_state) {
 8000cf8:	b510      	push	{r4, lr}
 8000cfa:	4604      	mov	r4, r0
	SH1106_CS_L();
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <SH1106_SetInvert+0x2c>)
 8000d00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d04:	f000 fd60 	bl	80017c8 <HAL_GPIO_WritePin>
	SH1106_cmd(inv_state ? SH1106_CMD_INV_ON : SH1106_CMD_INV_OFF);
 8000d08:	2c00      	cmp	r4, #0
 8000d0a:	bf14      	ite	ne
 8000d0c:	20a7      	movne	r0, #167	; 0xa7
 8000d0e:	20a6      	moveq	r0, #166	; 0xa6
 8000d10:	f7ff ff72 	bl	8000bf8 <SH1106_cmd>
}
 8000d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SH1106_CS_H();
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1e:	4801      	ldr	r0, [pc, #4]	; (8000d24 <SH1106_SetInvert+0x2c>)
 8000d20:	f000 bd52 	b.w	80017c8 <HAL_GPIO_WritePin>
 8000d24:	40010c00 	.word	0x40010c00

08000d28 <SH1106_SetXDir>:
void SH1106_SetXDir(uint8_t x_map) {
 8000d28:	b510      	push	{r4, lr}
 8000d2a:	4604      	mov	r4, r0
	SH1106_CS_L();
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <SH1106_SetXDir+0x2c>)
 8000d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d34:	f000 fd48 	bl	80017c8 <HAL_GPIO_WritePin>
	SH1106_cmd(x_map ? SH1106_CMD_SEG_INV : SH1106_CMD_SEG_NORM);
 8000d38:	2c00      	cmp	r4, #0
 8000d3a:	bf14      	ite	ne
 8000d3c:	20a1      	movne	r0, #161	; 0xa1
 8000d3e:	20a0      	moveq	r0, #160	; 0xa0
 8000d40:	f7ff ff5a 	bl	8000bf8 <SH1106_cmd>
}
 8000d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SH1106_CS_H();
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4e:	4801      	ldr	r0, [pc, #4]	; (8000d54 <SH1106_SetXDir+0x2c>)
 8000d50:	f000 bd3a 	b.w	80017c8 <HAL_GPIO_WritePin>
 8000d54:	40010c00 	.word	0x40010c00

08000d58 <SH1106_SetYDir>:
void SH1106_SetYDir(uint8_t y_map) {
 8000d58:	b510      	push	{r4, lr}
 8000d5a:	4604      	mov	r4, r0
	SH1106_CS_L();
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4809      	ldr	r0, [pc, #36]	; (8000d84 <SH1106_SetYDir+0x2c>)
 8000d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d64:	f000 fd30 	bl	80017c8 <HAL_GPIO_WritePin>
	SH1106_cmd(y_map ? SH1106_CMD_COM_INV : SH1106_CMD_COM_NORM);
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	bf14      	ite	ne
 8000d6c:	20c8      	movne	r0, #200	; 0xc8
 8000d6e:	20c0      	moveq	r0, #192	; 0xc0
 8000d70:	f7ff ff42 	bl	8000bf8 <SH1106_cmd>
}
 8000d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SH1106_CS_H();
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	4801      	ldr	r0, [pc, #4]	; (8000d84 <SH1106_SetYDir+0x2c>)
 8000d80:	f000 bd22 	b.w	80017c8 <HAL_GPIO_WritePin>
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <SH1106_Orientation>:
	switch(orientation) {
 8000d88:	2802      	cmp	r0, #2
void SH1106_Orientation(uint8_t orientation) {
 8000d8a:	b538      	push	{r3, r4, r5, lr}
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <SH1106_Orientation+0x54>)
 8000d8e:	4604      	mov	r4, r0
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <SH1106_Orientation+0x58>)
	switch(orientation) {
 8000d92:	d010      	beq.n	8000db6 <SH1106_Orientation+0x2e>
 8000d94:	2803      	cmp	r0, #3
 8000d96:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000d9a:	d015      	beq.n	8000dc8 <SH1106_Orientation+0x40>
 8000d9c:	2801      	cmp	r0, #1
 8000d9e:	d118      	bne.n	8000dd2 <SH1106_Orientation+0x4a>
			scr_width  = SCR_H;
 8000da0:	2540      	movs	r5, #64	; 0x40
			scr_height = SCR_W;
 8000da2:	8019      	strh	r1, [r3, #0]
			scr_width  = SCR_H;
 8000da4:	8015      	strh	r5, [r2, #0]
			SH1106_SetXDir(LCD_INVERT_OFF);
 8000da6:	f7ff ffbf 	bl	8000d28 <SH1106_SetXDir>
			SH1106_SetYDir(LCD_INVERT_OFF);
 8000daa:	2000      	movs	r0, #0
			SH1106_SetYDir(LCD_INVERT_ON);
 8000dac:	f7ff ffd4 	bl	8000d58 <SH1106_SetYDir>
	scr_orientation = orientation;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <SH1106_Orientation+0x5c>)
 8000db2:	701c      	strb	r4, [r3, #0]
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
			scr_width  = SCR_H;
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	8011      	strh	r1, [r2, #0]
			scr_height = SCR_W;
 8000dba:	2280      	movs	r2, #128	; 0x80
			SH1106_SetXDir(LCD_INVERT_OFF);
 8000dbc:	2000      	movs	r0, #0
			scr_height = SCR_W;
 8000dbe:	801a      	strh	r2, [r3, #0]
			SH1106_SetXDir(LCD_INVERT_ON);
 8000dc0:	f7ff ffb2 	bl	8000d28 <SH1106_SetXDir>
			SH1106_SetYDir(LCD_INVERT_ON);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	e7f1      	b.n	8000dac <SH1106_Orientation+0x24>
			scr_width  = SCR_W;
 8000dc8:	8011      	strh	r1, [r2, #0]
			scr_height = SCR_H;
 8000dca:	2240      	movs	r2, #64	; 0x40
			SH1106_SetXDir(LCD_INVERT_OFF);
 8000dcc:	2000      	movs	r0, #0
			scr_height = SCR_H;
 8000dce:	801a      	strh	r2, [r3, #0]
 8000dd0:	e7e9      	b.n	8000da6 <SH1106_Orientation+0x1e>
			scr_width  = SCR_W;
 8000dd2:	8011      	strh	r1, [r2, #0]
			scr_height = SCR_H;
 8000dd4:	2240      	movs	r2, #64	; 0x40
			SH1106_SetXDir(LCD_INVERT_ON);
 8000dd6:	2001      	movs	r0, #1
			scr_height = SCR_H;
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	e7f1      	b.n	8000dc0 <SH1106_Orientation+0x38>
 8000ddc:	20000006 	.word	0x20000006
 8000de0:	20000004 	.word	0x20000004
 8000de4:	20000051 	.word	0x20000051

08000de8 <SH1106_Flush>:
void SH1106_Flush(void) {
 8000de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	for (register uint32_t page = 0; page < bits_h; ++page)
 8000dea:	2400      	movs	r4, #0
	SH1106_CS_L();
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df2:	481b      	ldr	r0, [pc, #108]	; (8000e60 <SH1106_Flush+0x78>)
 8000df4:	f000 fce8 	bl	80017c8 <HAL_GPIO_WritePin>
	SH1106_DC_L();
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4819      	ldr	r0, [pc, #100]	; (8000e64 <SH1106_Flush+0x7c>)
 8000dfe:	f000 fce3 	bl	80017c8 <HAL_GPIO_WritePin>
	uint8_t ram_pointer[] = {
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <SH1106_Flush+0x80>)
		HAL_SPI_Transmit(&SH1106_SPI_PORT,(uint8_t *)ram_pointer,sizeof(ram_pointer),1000);
 8000e04:	4e19      	ldr	r6, [pc, #100]	; (8000e6c <SH1106_Flush+0x84>)
	uint8_t ram_pointer[] = {
 8000e06:	881b      	ldrh	r3, [r3, #0]
		SH1106_DC_H();
 8000e08:	4d16      	ldr	r5, [pc, #88]	; (8000e64 <SH1106_Flush+0x7c>)
	uint8_t ram_pointer[] = {
 8000e0a:	f8ad 3004 	strh.w	r3, [sp, #4]
		(*page_addr) = SH1106_CMD_PAGE_ADDR | page;
 8000e0e:	f064 034f 	orn	r3, r4, #79	; 0x4f
 8000e12:	f88d 3006 	strb.w	r3, [sp, #6]
		HAL_SPI_Transmit(&SH1106_SPI_PORT,(uint8_t *)ram_pointer,sizeof(ram_pointer),1000);
 8000e16:	2203      	movs	r2, #3
 8000e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1c:	a901      	add	r1, sp, #4
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f001 f80c 	bl	8001e3c <HAL_SPI_Transmit>
		SH1106_DC_H();
 8000e24:	2201      	movs	r2, #1
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	4628      	mov	r0, r5
 8000e2a:	f000 fccd 	bl	80017c8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&SH1106_SPI_PORT,vram, SCR_W, 1000);
 8000e2e:	4910      	ldr	r1, [pc, #64]	; (8000e70 <SH1106_Flush+0x88>)
 8000e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e34:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	f000 fffe 	bl	8001e3c <HAL_SPI_Transmit>
	for (register uint32_t page = 0; page < bits_h; ++page)
 8000e40:	3401      	adds	r4, #1
		SH1106_DC_L();
 8000e42:	2200      	movs	r2, #0
 8000e44:	2140      	movs	r1, #64	; 0x40
 8000e46:	4628      	mov	r0, r5
 8000e48:	f000 fcbe 	bl	80017c8 <HAL_GPIO_WritePin>
	for (register uint32_t page = 0; page < bits_h; ++page)
 8000e4c:	2c08      	cmp	r4, #8
 8000e4e:	d1de      	bne.n	8000e0e <SH1106_Flush+0x26>
	SH1106_CS_H();
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e56:	4802      	ldr	r0, [pc, #8]	; (8000e60 <SH1106_Flush+0x78>)
 8000e58:	f000 fcb6 	bl	80017c8 <HAL_GPIO_WritePin>
}
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	40011000 	.word	0x40011000
 8000e68:	080024a4 	.word	0x080024a4
 8000e6c:	20000454 	.word	0x20000454
 8000e70:	20000054 	.word	0x20000054

08000e74 <SH1106_Fill>:
	for (i = (SCR_W * SCR_H) >> 3; i--; ) {
 8000e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
		vRAM[i] = pattern;
 8000e7c:	4903      	ldr	r1, [pc, #12]	; (8000e8c <SH1106_Fill+0x18>)
	for (i = (SCR_W * SCR_H) >> 3; i--; ) {
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d100      	bne.n	8000e88 <SH1106_Fill+0x14>
}
 8000e86:	4770      	bx	lr
		vRAM[i] = pattern;
 8000e88:	54c8      	strb	r0, [r1, r3]
 8000e8a:	e7f8      	b.n	8000e7e <SH1106_Fill+0xa>
 8000e8c:	20000054 	.word	0x20000054

08000e90 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint8_t X1, uint8_t X2, uint8_t Y) {
 8000e90:	460b      	mov	r3, r1
 8000e92:	b410      	push	{r4}
	uint8_t X,W;

	if (X1 > X2) {
 8000e94:	4288      	cmp	r0, r1
void LCD_HLine(uint8_t X1, uint8_t X2, uint8_t Y) {
 8000e96:	4614      	mov	r4, r2
		X = X2; W = X1 - X2;
	} else {
		X = X1; W = X2 - X1;
 8000e98:	bf94      	ite	ls
 8000e9a:	1a0b      	subls	r3, r1, r0
		X = X2; W = X1 - X2;
 8000e9c:	1a42      	subhi	r2, r0, r1
	}
	W++;

	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000e9e:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <LCD_HLine+0x40>)
		X = X1; W = X2 - X1;
 8000ea0:	bf98      	it	ls
 8000ea2:	b2da      	uxtbls	r2, r3
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000ea4:	7809      	ldrb	r1, [r1, #0]
		X = X2; W = X1 - X2;
 8000ea6:	bf88      	it	hi
 8000ea8:	b2d2      	uxtbhi	r2, r2
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000eaa:	f101 31ff 	add.w	r1, r1, #4294967295
		X = X1; W = X2 - X1;
 8000eae:	bf98      	it	ls
 8000eb0:	4603      	movls	r3, r0
	W++;
 8000eb2:	3201      	adds	r2, #1
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000eb4:	2901      	cmp	r1, #1
	W++;
 8000eb6:	b2d2      	uxtb	r2, r2
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000eb8:	d804      	bhi.n	8000ec4 <LCD_HLine+0x34>
		LCD_VLineInt(Y,X,W);
 8000eba:	4620      	mov	r0, r4
 8000ebc:	4619      	mov	r1, r3
	} else {
		LCD_HLineInt(X,Y,W);
	}
}
 8000ebe:	bc10      	pop	{r4}
		LCD_VLineInt(Y,X,W);
 8000ec0:	f7ff bdee 	b.w	8000aa0 <LCD_VLineInt>
		LCD_HLineInt(X,Y,W);
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	4618      	mov	r0, r3
}
 8000ec8:	bc10      	pop	{r4}
		LCD_HLineInt(X,Y,W);
 8000eca:	f7ff bdb7 	b.w	8000a3c <LCD_HLineInt>
 8000ece:	bf00      	nop
 8000ed0:	20000051 	.word	0x20000051

08000ed4 <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   Char - character to be drawn
//   Font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint8_t X, uint8_t Y, uint8_t Char, const Font_TypeDef *Font) {
 8000ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if (Char < Font->font_MinChar || Char > Font->font_MaxChar) Char = Font->font_UnknownChar;
 8000ed8:	791c      	ldrb	r4, [r3, #4]
uint8_t LCD_PutChar(uint8_t X, uint8_t Y, uint8_t Char, const Font_TypeDef *Font) {
 8000eda:	b085      	sub	sp, #20
	if (Char < Font->font_MinChar || Char > Font->font_MaxChar) Char = Font->font_UnknownChar;
 8000edc:	4294      	cmp	r4, r2
 8000ede:	d802      	bhi.n	8000ee6 <LCD_PutChar+0x12>
 8000ee0:	795d      	ldrb	r5, [r3, #5]
 8000ee2:	4295      	cmp	r5, r2
 8000ee4:	d200      	bcs.n	8000ee8 <LCD_PutChar+0x14>
 8000ee6:	799a      	ldrb	r2, [r3, #6]

	// Pointer to the first byte of character in font data array
	pCh = &Font->font_Data[(Char - Font->font_MinChar) * Font->font_BPC];
 8000ee8:	1b12      	subs	r2, r2, r4
 8000eea:	789c      	ldrb	r4, [r3, #2]

	// Draw character
	if (Font->font_Scan == FONT_V) {
 8000eec:	78de      	ldrb	r6, [r3, #3]
	pCh = &Font->font_Data[(Char - Font->font_MinChar) * Font->font_BPC];
 8000eee:	fb04 3202 	mla	r2, r4, r2, r3
 8000ef2:	4db9      	ldr	r5, [pc, #740]	; (80011d8 <LCD_PutChar+0x304>)
 8000ef4:	3207      	adds	r2, #7
 8000ef6:	4cb9      	ldr	r4, [pc, #740]	; (80011dc <LCD_PutChar+0x308>)
	if (Font->font_Scan == FONT_V) {
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	f040 80b8 	bne.w	800106e <LCD_PutChar+0x19a>
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000efe:	782d      	ldrb	r5, [r5, #0]
		// Vertical pixels order
		if (Font->font_Height < 9) {
 8000f00:	785e      	ldrb	r6, [r3, #1]
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000f02:	3d01      	subs	r5, #1
 8000f04:	b2ed      	uxtb	r5, r5
		if (Font->font_Height < 9) {
 8000f06:	2e08      	cmp	r6, #8
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000f08:	9501      	str	r5, [sp, #4]
		if (Font->font_Height < 9) {
 8000f0a:	d912      	bls.n	8000f32 <LCD_PutChar+0x5e>
				while (pY < Y + Font->font_Height) {
					bL = 8;
					tmpCh = *pCh++;
					if (tmpCh) {
						while (bL) {
							if (tmpCh & 0x01) LCD_Pixel(pX,pY,LCD_PixelMode);
 8000f0c:	4607      	mov	r7, r0
 8000f0e:	f04f 0a01 	mov.w	sl, #1
 8000f12:	f894 9000 	ldrb.w	r9, [r4]
 8000f16:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 80011e0 <LCD_PutChar+0x30c>
			while (pX < X + Font->font_Width) {
 8000f1a:	781c      	ldrb	r4, [r3, #0]
 8000f1c:	4404      	add	r4, r0
 8000f1e:	42a7      	cmp	r7, r4
 8000f20:	da16      	bge.n	8000f50 <LCD_PutChar+0x7c>
		offset = ((X >> 3) << 7) + Y;
 8000f22:	08fc      	lsrs	r4, r7, #3
 8000f24:	01e4      	lsls	r4, r4, #7
		bpos   = X & 0x07;
 8000f26:	f007 0507 	and.w	r5, r7, #7
		offset = ((X >> 3) << 7) + Y;
 8000f2a:	9402      	str	r4, [sp, #8]
		bpos   = X & 0x07;
 8000f2c:	9503      	str	r5, [sp, #12]
		offset = ((X >> 3) << 7) + Y;
 8000f2e:	460c      	mov	r4, r1
 8000f30:	e08a      	b.n	8001048 <LCD_PutChar+0x174>
 8000f32:	f04f 0901 	mov.w	r9, #1
					if (tmpCh & 0x01) LCD_Pixel(pX,pY,LCD_PixelMode);
 8000f36:	f894 8000 	ldrb.w	r8, [r4]
 8000f3a:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 80011e0 <LCD_PutChar+0x30c>
 8000f3e:	1a84      	subs	r4, r0, r2
 8000f40:	9403      	str	r4, [sp, #12]
 8000f42:	9c03      	ldr	r4, [sp, #12]
 8000f44:	1917      	adds	r7, r2, r4
			while (pX < X + Font->font_Width) {
 8000f46:	781c      	ldrb	r4, [r3, #0]
 8000f48:	b2ff      	uxtb	r7, r7
 8000f4a:	4404      	add	r4, r0
 8000f4c:	42a7      	cmp	r7, r4
 8000f4e:	db05      	blt.n	8000f5c <LCD_PutChar+0x88>
				pY++;
			}
		}
	}

	return Font->font_Width + 1;
 8000f50:	7818      	ldrb	r0, [r3, #0]
 8000f52:	3001      	adds	r0, #1
 8000f54:	b2c0      	uxtb	r0, r0
}
 8000f56:	b005      	add	sp, #20
 8000f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pY = Y;
 8000f5c:	460e      	mov	r6, r1
		offset = ((X >> 3) << 7) + Y;
 8000f5e:	08fc      	lsrs	r4, r7, #3
 8000f60:	01e4      	lsls	r4, r4, #7
				tmpCh = *pCh++;
 8000f62:	f812 cb01 	ldrb.w	ip, [r2], #1
		offset = ((X >> 3) << 7) + Y;
 8000f66:	9402      	str	r4, [sp, #8]
		bpos   = X & 0x07;
 8000f68:	f007 0a07 	and.w	sl, r7, #7
				while (tmpCh) {
 8000f6c:	f1bc 0f00 	cmp.w	ip, #0
 8000f70:	d0e7      	beq.n	8000f42 <LCD_PutChar+0x6e>
					if (tmpCh & 0x01) LCD_Pixel(pX,pY,LCD_PixelMode);
 8000f72:	f01c 0f01 	tst.w	ip, #1
 8000f76:	d023      	beq.n	8000fc0 <LCD_PutChar+0xec>
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000f78:	9c01      	ldr	r4, [sp, #4]
 8000f7a:	2c01      	cmp	r4, #1
		offset = ((X >> 3) << 7) + Y;
 8000f7c:	bf95      	itete	ls
 8000f7e:	9c02      	ldrls	r4, [sp, #8]
		offset = ((Y >> 3) << 7) + X;
 8000f80:	08f4      	lsrhi	r4, r6, #3
		offset = ((X >> 3) << 7) + Y;
 8000f82:	1934      	addls	r4, r6, r4
		offset = ((Y >> 3) << 7) + X;
 8000f84:	eb07 14c4 	addhi.w	r4, r7, r4, lsl #7
		bpos   = X & 0x07;
 8000f88:	bf94      	ite	ls
 8000f8a:	4655      	movls	r5, sl
		bpos   = Y & 0x07;
 8000f8c:	f006 0507 	andhi.w	r5, r6, #7
	if (offset > ((SCR_W * SCR_H) >> 3)) {
 8000f90:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8000f94:	d814      	bhi.n	8000fc0 <LCD_PutChar+0xec>
	switch (Mode) {
 8000f96:	f1b8 0f01 	cmp.w	r8, #1
 8000f9a:	d009      	beq.n	8000fb0 <LCD_PutChar+0xdc>
 8000f9c:	f1b8 0f02 	cmp.w	r8, #2
 8000fa0:	d013      	beq.n	8000fca <LCD_PutChar+0xf6>
			vRAM[offset] |=  (1 << bpos);
 8000fa2:	f81e b004 	ldrb.w	fp, [lr, r4]
 8000fa6:	fa09 f505 	lsl.w	r5, r9, r5
 8000faa:	ea4b 0505 	orr.w	r5, fp, r5
 8000fae:	e005      	b.n	8000fbc <LCD_PutChar+0xe8>
			vRAM[offset] &= ~(1 << bpos);
 8000fb0:	f81e b004 	ldrb.w	fp, [lr, r4]
 8000fb4:	fa08 f505 	lsl.w	r5, r8, r5
 8000fb8:	ea2b 0505 	bic.w	r5, fp, r5
			vRAM[offset] |=  (1 << bpos);
 8000fbc:	f80e 5004 	strb.w	r5, [lr, r4]
					pY++;
 8000fc0:	3601      	adds	r6, #1
					tmpCh >>= 1;
 8000fc2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
					pY++;
 8000fc6:	b2f6      	uxtb	r6, r6
 8000fc8:	e7d0      	b.n	8000f6c <LCD_PutChar+0x98>
			vRAM[offset] ^=  (1 << bpos);
 8000fca:	f81e b004 	ldrb.w	fp, [lr, r4]
 8000fce:	fa09 f505 	lsl.w	r5, r9, r5
 8000fd2:	ea8b 0505 	eor.w	r5, fp, r5
 8000fd6:	e7f1      	b.n	8000fbc <LCD_PutChar+0xe8>
					tmpCh = *pCh++;
 8000fd8:	f812 8b01 	ldrb.w	r8, [r2], #1
					if (tmpCh) {
 8000fdc:	f1b8 0f00 	cmp.w	r8, #0
 8000fe0:	d043      	beq.n	800106a <LCD_PutChar+0x196>
 8000fe2:	f04f 0e08 	mov.w	lr, #8
							if (tmpCh & 0x01) LCD_Pixel(pX,pY,LCD_PixelMode);
 8000fe6:	f018 0f01 	tst.w	r8, #1
 8000fea:	d023      	beq.n	8001034 <LCD_PutChar+0x160>
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8000fec:	9d01      	ldr	r5, [sp, #4]
 8000fee:	2d01      	cmp	r5, #1
		offset = ((X >> 3) << 7) + Y;
 8000ff0:	bf95      	itete	ls
 8000ff2:	9d02      	ldrls	r5, [sp, #8]
		offset = ((Y >> 3) << 7) + X;
 8000ff4:	08e5      	lsrhi	r5, r4, #3
		offset = ((X >> 3) << 7) + Y;
 8000ff6:	1965      	addls	r5, r4, r5
		offset = ((Y >> 3) << 7) + X;
 8000ff8:	eb07 15c5 	addhi.w	r5, r7, r5, lsl #7
		bpos   = X & 0x07;
 8000ffc:	bf94      	ite	ls
 8000ffe:	9e03      	ldrls	r6, [sp, #12]
		bpos   = Y & 0x07;
 8001000:	f004 0607 	andhi.w	r6, r4, #7
	if (offset > ((SCR_W * SCR_H) >> 3)) {
 8001004:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001008:	d814      	bhi.n	8001034 <LCD_PutChar+0x160>
	switch (Mode) {
 800100a:	f1b9 0f01 	cmp.w	r9, #1
 800100e:	d009      	beq.n	8001024 <LCD_PutChar+0x150>
 8001010:	f1b9 0f02 	cmp.w	r9, #2
 8001014:	d01f      	beq.n	8001056 <LCD_PutChar+0x182>
			vRAM[offset] |=  (1 << bpos);
 8001016:	f81c b005 	ldrb.w	fp, [ip, r5]
 800101a:	fa0a f606 	lsl.w	r6, sl, r6
 800101e:	ea4b 0606 	orr.w	r6, fp, r6
 8001022:	e005      	b.n	8001030 <LCD_PutChar+0x15c>
			vRAM[offset] &= ~(1 << bpos);
 8001024:	f81c b005 	ldrb.w	fp, [ip, r5]
 8001028:	fa09 f606 	lsl.w	r6, r9, r6
 800102c:	ea2b 0606 	bic.w	r6, fp, r6
			vRAM[offset] |=  (1 << bpos);
 8001030:	f80c 6005 	strb.w	r6, [ip, r5]
							if (tmpCh) {
 8001034:	ea5f 0858 	movs.w	r8, r8, lsr #1
 8001038:	d014      	beq.n	8001064 <LCD_PutChar+0x190>
 800103a:	f10e 3eff 	add.w	lr, lr, #4294967295
								pY++;
 800103e:	3401      	adds	r4, #1
						while (bL) {
 8001040:	f01e 0eff 	ands.w	lr, lr, #255	; 0xff
								pY++;
 8001044:	b2e4      	uxtb	r4, r4
						while (bL) {
 8001046:	d1ce      	bne.n	8000fe6 <LCD_PutChar+0x112>
				while (pY < Y + Font->font_Height) {
 8001048:	785d      	ldrb	r5, [r3, #1]
 800104a:	440d      	add	r5, r1
 800104c:	42ac      	cmp	r4, r5
 800104e:	dbc3      	blt.n	8000fd8 <LCD_PutChar+0x104>
				pX++;
 8001050:	3701      	adds	r7, #1
 8001052:	b2ff      	uxtb	r7, r7
 8001054:	e761      	b.n	8000f1a <LCD_PutChar+0x46>
			vRAM[offset] ^=  (1 << bpos);
 8001056:	f81c b005 	ldrb.w	fp, [ip, r5]
 800105a:	fa0a f606 	lsl.w	r6, sl, r6
 800105e:	ea8b 0606 	eor.w	r6, fp, r6
 8001062:	e7e5      	b.n	8001030 <LCD_PutChar+0x15c>
								pY += bL;
 8001064:	4474      	add	r4, lr
						pY += bL;
 8001066:	b2e4      	uxtb	r4, r4
 8001068:	e7ee      	b.n	8001048 <LCD_PutChar+0x174>
 800106a:	3408      	adds	r4, #8
 800106c:	e7fb      	b.n	8001066 <LCD_PutChar+0x192>
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 800106e:	782d      	ldrb	r5, [r5, #0]
		if (Font->font_Width < 9) {
 8001070:	781e      	ldrb	r6, [r3, #0]
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8001072:	3d01      	subs	r5, #1
 8001074:	b2ed      	uxtb	r5, r5
		if (Font->font_Width < 9) {
 8001076:	2e08      	cmp	r6, #8
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8001078:	9501      	str	r5, [sp, #4]
		if (Font->font_Width < 9) {
 800107a:	d913      	bls.n	80010a4 <LCD_PutChar+0x1d0>
							if (tmpCh & 0x01) LCD_Pixel(pX,pY,LCD_PixelMode);
 800107c:	460f      	mov	r7, r1
 800107e:	f04f 0a01 	mov.w	sl, #1
 8001082:	f894 9000 	ldrb.w	r9, [r4]
 8001086:	f8df c158 	ldr.w	ip, [pc, #344]	; 80011e0 <LCD_PutChar+0x30c>
			while (pY < Y + Font->font_Height) {
 800108a:	785c      	ldrb	r4, [r3, #1]
 800108c:	440c      	add	r4, r1
 800108e:	42a7      	cmp	r7, r4
 8001090:	f6bf af5e 	bge.w	8000f50 <LCD_PutChar+0x7c>
		offset = ((Y >> 3) << 7) + X;
 8001094:	08fc      	lsrs	r4, r7, #3
 8001096:	01e4      	lsls	r4, r4, #7
		bpos   = Y & 0x07;
 8001098:	f007 0507 	and.w	r5, r7, #7
		offset = ((Y >> 3) << 7) + X;
 800109c:	9402      	str	r4, [sp, #8]
		bpos   = Y & 0x07;
 800109e:	9503      	str	r5, [sp, #12]
		offset = ((Y >> 3) << 7) + X;
 80010a0:	4604      	mov	r4, r0
 80010a2:	e085      	b.n	80011b0 <LCD_PutChar+0x2dc>
 80010a4:	f04f 0901 	mov.w	r9, #1
					if (tmpCh & 0x01) LCD_Pixel(pX,pY,LCD_PixelMode);
 80010a8:	f894 8000 	ldrb.w	r8, [r4]
 80010ac:	f8df e130 	ldr.w	lr, [pc, #304]	; 80011e0 <LCD_PutChar+0x30c>
 80010b0:	1a8c      	subs	r4, r1, r2
 80010b2:	9403      	str	r4, [sp, #12]
 80010b4:	9c03      	ldr	r4, [sp, #12]
 80010b6:	1917      	adds	r7, r2, r4
			while (pY < Y + Font->font_Height) {
 80010b8:	785c      	ldrb	r4, [r3, #1]
 80010ba:	b2ff      	uxtb	r7, r7
 80010bc:	440c      	add	r4, r1
 80010be:	42a7      	cmp	r7, r4
 80010c0:	f6bf af46 	bge.w	8000f50 <LCD_PutChar+0x7c>
				pX = X;
 80010c4:	4606      	mov	r6, r0
		offset = ((Y >> 3) << 7) + X;
 80010c6:	08fc      	lsrs	r4, r7, #3
 80010c8:	01e4      	lsls	r4, r4, #7
				tmpCh = *pCh++;
 80010ca:	f812 cb01 	ldrb.w	ip, [r2], #1
		offset = ((Y >> 3) << 7) + X;
 80010ce:	9402      	str	r4, [sp, #8]
		bpos   = Y & 0x07;
 80010d0:	f007 0a07 	and.w	sl, r7, #7
				while (tmpCh) {
 80010d4:	f1bc 0f00 	cmp.w	ip, #0
 80010d8:	d0ec      	beq.n	80010b4 <LCD_PutChar+0x1e0>
					if (tmpCh & 0x01) LCD_Pixel(pX,pY,LCD_PixelMode);
 80010da:	f01c 0f01 	tst.w	ip, #1
 80010de:	d023      	beq.n	8001128 <LCD_PutChar+0x254>
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 80010e0:	9c01      	ldr	r4, [sp, #4]
 80010e2:	2c01      	cmp	r4, #1
		offset = ((Y >> 3) << 7) + X;
 80010e4:	bf8d      	iteet	hi
 80010e6:	9c02      	ldrhi	r4, [sp, #8]
		offset = ((X >> 3) << 7) + Y;
 80010e8:	08f4      	lsrls	r4, r6, #3
 80010ea:	eb07 14c4 	addls.w	r4, r7, r4, lsl #7
		offset = ((Y >> 3) << 7) + X;
 80010ee:	1934      	addhi	r4, r6, r4
		bpos   = X & 0x07;
 80010f0:	bf94      	ite	ls
 80010f2:	f006 0507 	andls.w	r5, r6, #7
		bpos   = Y & 0x07;
 80010f6:	4655      	movhi	r5, sl
	if (offset > ((SCR_W * SCR_H) >> 3)) {
 80010f8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80010fc:	d814      	bhi.n	8001128 <LCD_PutChar+0x254>
	switch (Mode) {
 80010fe:	f1b8 0f01 	cmp.w	r8, #1
 8001102:	d009      	beq.n	8001118 <LCD_PutChar+0x244>
 8001104:	f1b8 0f02 	cmp.w	r8, #2
 8001108:	d013      	beq.n	8001132 <LCD_PutChar+0x25e>
			vRAM[offset] |=  (1 << bpos);
 800110a:	f81e b004 	ldrb.w	fp, [lr, r4]
 800110e:	fa09 f505 	lsl.w	r5, r9, r5
 8001112:	ea4b 0505 	orr.w	r5, fp, r5
 8001116:	e005      	b.n	8001124 <LCD_PutChar+0x250>
			vRAM[offset] &= ~(1 << bpos);
 8001118:	f81e b004 	ldrb.w	fp, [lr, r4]
 800111c:	fa08 f505 	lsl.w	r5, r8, r5
 8001120:	ea2b 0505 	bic.w	r5, fp, r5
			vRAM[offset] |=  (1 << bpos);
 8001124:	f80e 5004 	strb.w	r5, [lr, r4]
					pX++;
 8001128:	3601      	adds	r6, #1
					tmpCh >>= 1;
 800112a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
					pX++;
 800112e:	b2f6      	uxtb	r6, r6
 8001130:	e7d0      	b.n	80010d4 <LCD_PutChar+0x200>
			vRAM[offset] ^=  (1 << bpos);
 8001132:	f81e b004 	ldrb.w	fp, [lr, r4]
 8001136:	fa09 f505 	lsl.w	r5, r9, r5
 800113a:	ea8b 0505 	eor.w	r5, fp, r5
 800113e:	e7f1      	b.n	8001124 <LCD_PutChar+0x250>
					tmpCh = *pCh++;
 8001140:	f812 8b01 	ldrb.w	r8, [r2], #1
					if (tmpCh) {
 8001144:	f1b8 0f00 	cmp.w	r8, #0
 8001148:	d043      	beq.n	80011d2 <LCD_PutChar+0x2fe>
 800114a:	f04f 0e08 	mov.w	lr, #8
							if (tmpCh & 0x01) LCD_Pixel(pX,pY,LCD_PixelMode);
 800114e:	f018 0f01 	tst.w	r8, #1
 8001152:	d023      	beq.n	800119c <LCD_PutChar+0x2c8>
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8001154:	9d01      	ldr	r5, [sp, #4]
 8001156:	2d01      	cmp	r5, #1
		offset = ((Y >> 3) << 7) + X;
 8001158:	bf8d      	iteet	hi
 800115a:	9d02      	ldrhi	r5, [sp, #8]
		offset = ((X >> 3) << 7) + Y;
 800115c:	08e5      	lsrls	r5, r4, #3
 800115e:	eb07 15c5 	addls.w	r5, r7, r5, lsl #7
		offset = ((Y >> 3) << 7) + X;
 8001162:	1965      	addhi	r5, r4, r5
		bpos   = X & 0x07;
 8001164:	bf94      	ite	ls
 8001166:	f004 0607 	andls.w	r6, r4, #7
		bpos   = Y & 0x07;
 800116a:	9e03      	ldrhi	r6, [sp, #12]
	if (offset > ((SCR_W * SCR_H) >> 3)) {
 800116c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001170:	d814      	bhi.n	800119c <LCD_PutChar+0x2c8>
	switch (Mode) {
 8001172:	f1b9 0f01 	cmp.w	r9, #1
 8001176:	d009      	beq.n	800118c <LCD_PutChar+0x2b8>
 8001178:	f1b9 0f02 	cmp.w	r9, #2
 800117c:	d01f      	beq.n	80011be <LCD_PutChar+0x2ea>
			vRAM[offset] |=  (1 << bpos);
 800117e:	f81c b005 	ldrb.w	fp, [ip, r5]
 8001182:	fa0a f606 	lsl.w	r6, sl, r6
 8001186:	ea4b 0606 	orr.w	r6, fp, r6
 800118a:	e005      	b.n	8001198 <LCD_PutChar+0x2c4>
			vRAM[offset] &= ~(1 << bpos);
 800118c:	f81c b005 	ldrb.w	fp, [ip, r5]
 8001190:	fa09 f606 	lsl.w	r6, r9, r6
 8001194:	ea2b 0606 	bic.w	r6, fp, r6
			vRAM[offset] |=  (1 << bpos);
 8001198:	f80c 6005 	strb.w	r6, [ip, r5]
							if (tmpCh) {
 800119c:	ea5f 0858 	movs.w	r8, r8, lsr #1
 80011a0:	d014      	beq.n	80011cc <LCD_PutChar+0x2f8>
								bL--;
 80011a2:	f10e 3eff 	add.w	lr, lr, #4294967295
								pX++;
 80011a6:	3401      	adds	r4, #1
						while (bL) {
 80011a8:	f01e 0eff 	ands.w	lr, lr, #255	; 0xff
								pX++;
 80011ac:	b2e4      	uxtb	r4, r4
						while (bL) {
 80011ae:	d1ce      	bne.n	800114e <LCD_PutChar+0x27a>
				while (pX < X + Font->font_Width) {
 80011b0:	781d      	ldrb	r5, [r3, #0]
 80011b2:	4405      	add	r5, r0
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	dbc3      	blt.n	8001140 <LCD_PutChar+0x26c>
				pY++;
 80011b8:	3701      	adds	r7, #1
 80011ba:	b2ff      	uxtb	r7, r7
 80011bc:	e765      	b.n	800108a <LCD_PutChar+0x1b6>
			vRAM[offset] ^=  (1 << bpos);
 80011be:	f81c b005 	ldrb.w	fp, [ip, r5]
 80011c2:	fa0a f606 	lsl.w	r6, sl, r6
 80011c6:	ea8b 0606 	eor.w	r6, fp, r6
 80011ca:	e7e5      	b.n	8001198 <LCD_PutChar+0x2c4>
								pX += bL;
 80011cc:	4474      	add	r4, lr
						pX += bL;
 80011ce:	b2e4      	uxtb	r4, r4
 80011d0:	e7ee      	b.n	80011b0 <LCD_PutChar+0x2dc>
 80011d2:	3408      	adds	r4, #8
 80011d4:	e7fb      	b.n	80011ce <LCD_PutChar+0x2fa>
 80011d6:	bf00      	nop
 80011d8:	20000051 	.word	0x20000051
 80011dc:	20000050 	.word	0x20000050
 80011e0:	20000054 	.word	0x20000054

080011e4 <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   Font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint8_t X, uint8_t Y, const char *str, const Font_TypeDef *Font) {
 80011e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011e8:	461f      	mov	r7, r3
 80011ea:	4606      	mov	r6, r0
 80011ec:	4688      	mov	r8, r1
	uint8_t pX = X;
 80011ee:	4604      	mov	r4, r0
	uint8_t eX = scr_width - Font->font_Width - 1;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <LCD_PutStr+0x3c>)
 80011f2:	f102 39ff 	add.w	r9, r2, #4294967295
 80011f6:	781d      	ldrb	r5, [r3, #0]
 80011f8:	783b      	ldrb	r3, [r7, #0]
 80011fa:	3d01      	subs	r5, #1
 80011fc:	1aed      	subs	r5, r5, r3
 80011fe:	b2ed      	uxtb	r5, r5

	while (*str) {
 8001200:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8001204:	b142      	cbz	r2, 8001218 <LCD_PutStr+0x34>
		pX += LCD_PutChar(pX,Y,*str++,Font);
 8001206:	4620      	mov	r0, r4
 8001208:	463b      	mov	r3, r7
 800120a:	4641      	mov	r1, r8
 800120c:	f7ff fe62 	bl	8000ed4 <LCD_PutChar>
 8001210:	4404      	add	r4, r0
 8001212:	b2e4      	uxtb	r4, r4
		if (pX > eX) break;
 8001214:	42a5      	cmp	r5, r4
 8001216:	d2f3      	bcs.n	8001200 <LCD_PutStr+0x1c>
	}

	return (pX - X);
 8001218:	1ba0      	subs	r0, r4, r6
}
 800121a:	b280      	uxth	r0, r0
 800121c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001220:	20000006 	.word	0x20000006

08001224 <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   Font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint8_t X, uint8_t Y, int32_t num, const Font_TypeDef *Font) {
 8001224:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001228:	4698      	mov	r8, r3
	uint8_t *pStr = str;
	uint8_t pX = X;
	uint8_t neg = 0;

	// String termination character
	*pStr++ = '\0';
 800122a:	2300      	movs	r3, #0

	// Convert number to characters
	if (num < 0) {
 800122c:	2a00      	cmp	r2, #0
	*pStr++ = '\0';
 800122e:	f88d 3004 	strb.w	r3, [sp, #4]
uint8_t LCD_PutInt(uint8_t X, uint8_t Y, int32_t num, const Font_TypeDef *Font) {
 8001232:	4606      	mov	r6, r0
		neg = 1;
 8001234:	bfb8      	it	lt
 8001236:	2301      	movlt	r3, #1
		num *= -1;
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 8001238:	f04f 040a 	mov.w	r4, #10
uint8_t LCD_PutInt(uint8_t X, uint8_t Y, int32_t num, const Font_TypeDef *Font) {
 800123c:	460f      	mov	r7, r1
		num *= -1;
 800123e:	bfb8      	it	lt
 8001240:	4252      	neglt	r2, r2
		neg = 1;
 8001242:	f10d 0105 	add.w	r1, sp, #5
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 8001246:	fb92 f0f4 	sdiv	r0, r2, r4
 800124a:	460d      	mov	r5, r1
 800124c:	fb04 2210 	mls	r2, r4, r0, r2
 8001250:	3230      	adds	r2, #48	; 0x30
 8001252:	f805 2b01 	strb.w	r2, [r5], #1
 8001256:	4602      	mov	r2, r0
 8001258:	b960      	cbnz	r0, 8001274 <LCD_PutInt+0x50>
	if (neg) *pStr++ = '-';
 800125a:	b113      	cbz	r3, 8001262 <LCD_PutInt+0x3e>
 800125c:	232d      	movs	r3, #45	; 0x2d
 800125e:	702b      	strb	r3, [r5, #0]
 8001260:	1c8d      	adds	r5, r1, #2
 8001262:	4634      	mov	r4, r6

	// Draw a number
	while (*--pStr) pX += LCD_PutChar(pX,Y,*pStr,Font);
 8001264:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8001268:	b932      	cbnz	r2, 8001278 <LCD_PutInt+0x54>

	return (pX - X);
 800126a:	1ba0      	subs	r0, r4, r6
}
 800126c:	b2c0      	uxtb	r0, r0
 800126e:	b004      	add	sp, #16
 8001270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001274:	4629      	mov	r1, r5
 8001276:	e7e6      	b.n	8001246 <LCD_PutInt+0x22>
	while (*--pStr) pX += LCD_PutChar(pX,Y,*pStr,Font);
 8001278:	4620      	mov	r0, r4
 800127a:	4643      	mov	r3, r8
 800127c:	4639      	mov	r1, r7
 800127e:	f7ff fe29 	bl	8000ed4 <LCD_PutChar>
 8001282:	4404      	add	r4, r0
 8001284:	b2e4      	uxtb	r4, r4
 8001286:	e7ed      	b.n	8001264 <LCD_PutInt+0x40>

08001288 <LCD_DrawBitmap>:
//   W, H - width and height of bitmap in pixels
//   pBMP - pointer to array containing bitmap
// note: each '1' bit in the bitmap will be drawn as a pixel
//       each '0' bit in the will not be drawn (transparent bitmap)
// bitmap: one byte per 8 vertical pixels, LSB top, truncate bottom bits
void LCD_DrawBitmap(uint8_t X, uint8_t Y, uint8_t W, uint8_t H, const uint8_t* pBMP) {
 8001288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800128c:	f04f 0801 	mov.w	r8, #1
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 8001290:	4c2e      	ldr	r4, [pc, #184]	; (800134c <LCD_DrawBitmap+0xc4>)
 8001292:	4f2f      	ldr	r7, [pc, #188]	; (8001350 <LCD_DrawBitmap+0xc8>)
 8001294:	7824      	ldrb	r4, [r4, #0]
	uint8_t pY;
	uint8_t tmpCh;
	uint8_t bL;

	pY = Y;
	while (pY < Y + H) {
 8001296:	eb01 0903 	add.w	r9, r1, r3
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 800129a:	3c01      	subs	r4, #1
 800129c:	b2e4      	uxtb	r4, r4
 800129e:	9400      	str	r4, [sp, #0]
		while (pX < X + W) {
			bL = 0;
			tmpCh = *pBMP++;
			if (tmpCh) {
				while (bL < 8) {
					if (tmpCh & 0x01) LCD_Pixel(pX,pY + bL,LCD_PixelMode);
 80012a0:	4c2c      	ldr	r4, [pc, #176]	; (8001354 <LCD_DrawBitmap+0xcc>)
		while (pX < X + W) {
 80012a2:	4402      	add	r2, r0
					if (tmpCh & 0x01) LCD_Pixel(pX,pY + bL,LCD_PixelMode);
 80012a4:	f894 c000 	ldrb.w	ip, [r4]
	while (pY < Y + H) {
 80012a8:	4549      	cmp	r1, r9
 80012aa:	da4c      	bge.n	8001346 <LCD_DrawBitmap+0xbe>
 80012ac:	4605      	mov	r5, r0
 80012ae:	e03b      	b.n	8001328 <LCD_DrawBitmap+0xa0>
			tmpCh = *pBMP++;
 80012b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80012b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80012b6:	940c      	str	r4, [sp, #48]	; 0x30
			if (tmpCh) {
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d041      	beq.n	8001340 <LCD_DrawBitmap+0xb8>
		offset = ((X >> 3) << 7) + Y;
 80012bc:	f04f 0e00 	mov.w	lr, #0
 80012c0:	08ec      	lsrs	r4, r5, #3
 80012c2:	01e4      	lsls	r4, r4, #7
 80012c4:	9401      	str	r4, [sp, #4]
		bpos   = X & 0x07;
 80012c6:	f005 0a07 	and.w	sl, r5, #7
					if (tmpCh & 0x01) LCD_Pixel(pX,pY + bL,LCD_PixelMode);
 80012ca:	07dc      	lsls	r4, r3, #31
 80012cc:	d525      	bpl.n	800131a <LCD_DrawBitmap+0x92>
	if (scr_orientation == LCD_ORIENT_CW || scr_orientation == LCD_ORIENT_CCW) {
 80012ce:	9e00      	ldr	r6, [sp, #0]
 80012d0:	eb01 040e 	add.w	r4, r1, lr
 80012d4:	2e01      	cmp	r6, #1
 80012d6:	b2e4      	uxtb	r4, r4
		offset = ((X >> 3) << 7) + Y;
 80012d8:	bf95      	itete	ls
 80012da:	9e01      	ldrls	r6, [sp, #4]
		offset = ((Y >> 3) << 7) + X;
 80012dc:	08e6      	lsrhi	r6, r4, #3
		offset = ((X >> 3) << 7) + Y;
 80012de:	19a6      	addls	r6, r4, r6
		offset = ((Y >> 3) << 7) + X;
 80012e0:	eb05 16c6 	addhi.w	r6, r5, r6, lsl #7
		bpos   = X & 0x07;
 80012e4:	bf94      	ite	ls
 80012e6:	4654      	movls	r4, sl
		bpos   = Y & 0x07;
 80012e8:	f004 0407 	andhi.w	r4, r4, #7
	if (offset > ((SCR_W * SCR_H) >> 3)) {
 80012ec:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80012f0:	d813      	bhi.n	800131a <LCD_DrawBitmap+0x92>
	switch (Mode) {
 80012f2:	f1bc 0f01 	cmp.w	ip, #1
 80012f6:	d009      	beq.n	800130c <LCD_DrawBitmap+0x84>
 80012f8:	f1bc 0f02 	cmp.w	ip, #2
 80012fc:	d019      	beq.n	8001332 <LCD_DrawBitmap+0xaa>
			vRAM[offset] |=  (1 << bpos);
 80012fe:	f817 b006 	ldrb.w	fp, [r7, r6]
 8001302:	fa08 f404 	lsl.w	r4, r8, r4
 8001306:	ea4b 0404 	orr.w	r4, fp, r4
 800130a:	e005      	b.n	8001318 <LCD_DrawBitmap+0x90>
			vRAM[offset] &= ~(1 << bpos);
 800130c:	f817 b006 	ldrb.w	fp, [r7, r6]
 8001310:	fa0c f404 	lsl.w	r4, ip, r4
 8001314:	ea2b 0404 	bic.w	r4, fp, r4
			vRAM[offset] |=  (1 << bpos);
 8001318:	55bc      	strb	r4, [r7, r6]
					tmpCh >>= 1;
					if (tmpCh) {
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	d010      	beq.n	8001340 <LCD_DrawBitmap+0xb8>
 800131e:	f10e 0e01 	add.w	lr, lr, #1
				while (bL < 8) {
 8001322:	f1be 0f08 	cmp.w	lr, #8
 8001326:	d1d0      	bne.n	80012ca <LCD_DrawBitmap+0x42>
		while (pX < X + W) {
 8001328:	4295      	cmp	r5, r2
 800132a:	dbc1      	blt.n	80012b0 <LCD_DrawBitmap+0x28>
				}
			} else {
				pX++;
			}
		}
		pY += 8;
 800132c:	3108      	adds	r1, #8
 800132e:	b2c9      	uxtb	r1, r1
 8001330:	e7ba      	b.n	80012a8 <LCD_DrawBitmap+0x20>
			vRAM[offset] ^=  (1 << bpos);
 8001332:	f817 b006 	ldrb.w	fp, [r7, r6]
 8001336:	fa08 f404 	lsl.w	r4, r8, r4
 800133a:	ea8b 0404 	eor.w	r4, fp, r4
 800133e:	e7eb      	b.n	8001318 <LCD_DrawBitmap+0x90>
				pX++;
 8001340:	3501      	adds	r5, #1
 8001342:	b2ed      	uxtb	r5, r5
 8001344:	e7f0      	b.n	8001328 <LCD_DrawBitmap+0xa0>
	}
}
 8001346:	b003      	add	sp, #12
 8001348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800134c:	20000051 	.word	0x20000051
 8001350:	20000054 	.word	0x20000054
 8001354:	20000050 	.word	0x20000050

08001358 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_MspInit+0x3c>)
{
 800135a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800135c:	699a      	ldr	r2, [r3, #24]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	619a      	str	r2, [r3, #24]
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	f002 0201 	and.w	r2, r2, #1
 800136a:	9200      	str	r2, [sp, #0]
 800136c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	69da      	ldr	r2, [r3, #28]
 8001370:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001374:	61da      	str	r2, [r3, #28]
 8001376:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001382:	6853      	ldr	r3, [r2, #4]
 8001384:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800138c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	b002      	add	sp, #8
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000

0800139c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800139c:	b510      	push	{r4, lr}
 800139e:	4604      	mov	r4, r0
 80013a0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	2210      	movs	r2, #16
 80013a4:	2100      	movs	r1, #0
 80013a6:	a802      	add	r0, sp, #8
 80013a8:	f001 f868 	bl	800247c <memset>
  if(hspi->Instance==SPI2)
 80013ac:	6822      	ldr	r2, [r4, #0]
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_SPI_MspInit+0x5c>)
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d11e      	bne.n	80013f2 <HAL_SPI_MspInit+0x56>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013b4:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80013b8:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013c0:	61da      	str	r2, [r3, #28]
 80013c2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	699a      	ldr	r2, [r3, #24]
 80013d0:	f042 0208 	orr.w	r2, r2, #8
 80013d4:	619a      	str	r2, [r3, #24]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80013e0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80013e4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f000 f8f9 	bl	80015e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013f2:	b006      	add	sp, #24
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	bf00      	nop
 80013f8:	40003800 	.word	0x40003800
 80013fc:	40010c00 	.word	0x40010c00

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8001402:	6803      	ldr	r3, [r0, #0]
 8001404:	4a13      	ldr	r2, [pc, #76]	; (8001454 <HAL_TIM_Base_MspInit+0x54>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d114      	bne.n	8001434 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_TIM_Base_MspInit+0x58>)
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800140c:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001414:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001418:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800141a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001424:	f000 f886 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001428:	2019      	movs	r0, #25
 800142a:	f000 f8b7 	bl	800159c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800142e:	b003      	add	sp, #12
 8001430:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8001434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001438:	d1f9      	bne.n	800142e <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800143a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800143e:	69da      	ldr	r2, [r3, #28]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	61da      	str	r2, [r3, #28]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	9b01      	ldr	r3, [sp, #4]
}
 8001450:	e7ed      	b.n	800142e <HAL_TIM_Base_MspInit+0x2e>
 8001452:	bf00      	nop
 8001454:	40012c00 	.word	0x40012c00
 8001458:	40021000 	.word	0x40021000

0800145c <NMI_Handler>:
 800145c:	4770      	bx	lr

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	e7fe      	b.n	800145e <HardFault_Handler>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler>

08001466 <SVC_Handler>:
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:
 8001468:	4770      	bx	lr

0800146a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 b83e 	b.w	80014ec <HAL_IncTick>

08001470 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001470:	4801      	ldr	r0, [pc, #4]	; (8001478 <TIM1_UP_IRQHandler+0x8>)
 8001472:	f000 bdc5 	b.w	8002000 <HAL_TIM_IRQHandler>
 8001476:	bf00      	nop
 8001478:	200004c4 	.word	0x200004c4

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	4770      	bx	lr
	...

08001480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_InitTick+0x3c>)
{
 8001484:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001486:	7818      	ldrb	r0, [r3, #0]
 8001488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_InitTick+0x40>)
 8001492:	6810      	ldr	r0, [r2, #0]
 8001494:	fbb0 f0f3 	udiv	r0, r0, r3
 8001498:	f000 f88e 	bl	80015b8 <HAL_SYSTICK_Config>
 800149c:	4604      	mov	r4, r0
 800149e:	b958      	cbnz	r0, 80014b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a0:	2d0f      	cmp	r5, #15
 80014a2:	d809      	bhi.n	80014b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	4602      	mov	r2, r0
 80014a6:	4629      	mov	r1, r5
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f842 	bl	8001534 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <HAL_InitTick+0x44>)
 80014b2:	4620      	mov	r0, r4
 80014b4:	601d      	str	r5, [r3, #0]
 80014b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014ba:	bd38      	pop	{r3, r4, r5, pc}
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000010 	.word	0x20000010

080014c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_Init+0x20>)
{
 80014ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ce:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d6:	f000 f81b 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff ffd0 	bl	8001480 <HAL_InitTick>
  HAL_MspInit();
 80014e0:	f7ff ff3a 	bl	8001358 <HAL_MspInit>
}
 80014e4:	2000      	movs	r0, #0
 80014e6:	bd08      	pop	{r3, pc}
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014ec:	4a03      	ldr	r2, [pc, #12]	; (80014fc <HAL_IncTick+0x10>)
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_IncTick+0x14>)
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	440b      	add	r3, r1
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000580 	.word	0x20000580
 8001500:	2000000c 	.word	0x2000000c

08001504 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001504:	4b01      	ldr	r3, [pc, #4]	; (800150c <HAL_GetTick+0x8>)
 8001506:	6818      	ldr	r0, [r3, #0]
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000580 	.word	0x20000580

08001510 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001512:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001516:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800151e:	041b      	lsls	r3, r3, #16
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800152a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800152c:	60d3      	str	r3, [r2, #12]
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001536:	b530      	push	{r4, r5, lr}
 8001538:	68dc      	ldr	r4, [r3, #12]
 800153a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	2b04      	cmp	r3, #4
 8001546:	bf28      	it	cs
 8001548:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001550:	bf98      	it	ls
 8001552:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	fa05 f303 	lsl.w	r3, r5, r3
 8001558:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155c:	bf88      	it	hi
 800155e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4019      	ands	r1, r3
 8001562:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	fa05 f404 	lsl.w	r4, r5, r4
 8001568:	3c01      	subs	r4, #1
 800156a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800156c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156e:	ea42 0201 	orr.w	r2, r2, r1
 8001572:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	bfa9      	itett	ge
 8001578:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	4b06      	ldrlt	r3, [pc, #24]	; (8001598 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	b2d2      	uxtbge	r2, r2
 8001580:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	bfbb      	ittet	lt
 8001586:	f000 000f 	andlt.w	r0, r0, #15
 800158a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	541a      	strblt	r2, [r3, r0]
 8001592:	bd30      	pop	{r4, r5, pc}
 8001594:	e000ed00 	.word	0xe000ed00
 8001598:	e000ed14 	.word	0xe000ed14

0800159c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800159c:	2800      	cmp	r0, #0
 800159e:	db08      	blt.n	80015b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a0:	2301      	movs	r3, #1
 80015a2:	0942      	lsrs	r2, r0, #5
 80015a4:	f000 001f 	and.w	r0, r0, #31
 80015a8:	fa03 f000 	lsl.w	r0, r3, r0
 80015ac:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <HAL_NVIC_EnableIRQ+0x18>)
 80015ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	3801      	subs	r0, #1
 80015ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015be:	d20a      	bcs.n	80015d6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015e8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80015ea:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ec:	4f6c      	ldr	r7, [pc, #432]	; (80017a0 <HAL_GPIO_Init+0x1bc>)
 80015ee:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f0:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 80017ac <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 80015f4:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80017b0 <HAL_GPIO_Init+0x1cc>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	680a      	ldr	r2, [r1, #0]
 80015fa:	fa32 f506 	lsrs.w	r5, r2, r6
 80015fe:	d102      	bne.n	8001606 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001600:	b003      	add	sp, #12
 8001602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001606:	f04f 0801 	mov.w	r8, #1
 800160a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001612:	4590      	cmp	r8, r2
 8001614:	f040 8084 	bne.w	8001720 <HAL_GPIO_Init+0x13c>
      switch (GPIO_Init->Mode)
 8001618:	684d      	ldr	r5, [r1, #4]
 800161a:	2d12      	cmp	r5, #18
 800161c:	f000 80b1 	beq.w	8001782 <HAL_GPIO_Init+0x19e>
 8001620:	f200 8087 	bhi.w	8001732 <HAL_GPIO_Init+0x14e>
 8001624:	2d02      	cmp	r5, #2
 8001626:	f000 80a9 	beq.w	800177c <HAL_GPIO_Init+0x198>
 800162a:	d87b      	bhi.n	8001724 <HAL_GPIO_Init+0x140>
 800162c:	2d00      	cmp	r5, #0
 800162e:	f000 808c 	beq.w	800174a <HAL_GPIO_Init+0x166>
 8001632:	2d01      	cmp	r5, #1
 8001634:	f000 80a0 	beq.w	8001778 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001638:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800163c:	2aff      	cmp	r2, #255	; 0xff
 800163e:	bf93      	iteet	ls
 8001640:	4682      	movls	sl, r0
 8001642:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001646:	3d08      	subhi	r5, #8
 8001648:	f8d0 b000 	ldrls.w	fp, [r0]
 800164c:	bf92      	itee	ls
 800164e:	00b5      	lslls	r5, r6, #2
 8001650:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001654:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001656:	fa09 f805 	lsl.w	r8, r9, r5
 800165a:	ea2b 0808 	bic.w	r8, fp, r8
 800165e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001662:	bf88      	it	hi
 8001664:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001668:	ea48 0505 	orr.w	r5, r8, r5
 800166c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001670:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001674:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001678:	d052      	beq.n	8001720 <HAL_GPIO_Init+0x13c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800167a:	69bd      	ldr	r5, [r7, #24]
 800167c:	f026 0803 	bic.w	r8, r6, #3
 8001680:	f045 0501 	orr.w	r5, r5, #1
 8001684:	61bd      	str	r5, [r7, #24]
 8001686:	69bd      	ldr	r5, [r7, #24]
 8001688:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800168c:	f005 0501 	and.w	r5, r5, #1
 8001690:	9501      	str	r5, [sp, #4]
 8001692:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001696:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800169a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800169c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80016a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016a4:	fa09 f90b 	lsl.w	r9, r9, fp
 80016a8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ac:	4d3e      	ldr	r5, [pc, #248]	; (80017a8 <HAL_GPIO_Init+0x1c4>)
 80016ae:	42a8      	cmp	r0, r5
 80016b0:	d06c      	beq.n	800178c <HAL_GPIO_Init+0x1a8>
 80016b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016b6:	42a8      	cmp	r0, r5
 80016b8:	d06a      	beq.n	8001790 <HAL_GPIO_Init+0x1ac>
 80016ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016be:	42a8      	cmp	r0, r5
 80016c0:	d068      	beq.n	8001794 <HAL_GPIO_Init+0x1b0>
 80016c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016c6:	42a8      	cmp	r0, r5
 80016c8:	d066      	beq.n	8001798 <HAL_GPIO_Init+0x1b4>
 80016ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016ce:	42a8      	cmp	r0, r5
 80016d0:	d064      	beq.n	800179c <HAL_GPIO_Init+0x1b8>
 80016d2:	4570      	cmp	r0, lr
 80016d4:	bf0c      	ite	eq
 80016d6:	2505      	moveq	r5, #5
 80016d8:	2506      	movne	r5, #6
 80016da:	fa05 f50b 	lsl.w	r5, r5, fp
 80016de:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80016e2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80016e6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80016ec:	bf14      	ite	ne
 80016ee:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f0:	4395      	biceq	r5, r2
 80016f2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80016f4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80016fa:	bf14      	ite	ne
 80016fc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016fe:	4395      	biceq	r5, r2
 8001700:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001702:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001704:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001708:	bf14      	ite	ne
 800170a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170c:	4395      	biceq	r5, r2
 800170e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001710:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001712:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001716:	bf14      	ite	ne
 8001718:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800171a:	ea25 0202 	biceq.w	r2, r5, r2
 800171e:	60da      	str	r2, [r3, #12]
	position++;
 8001720:	3601      	adds	r6, #1
 8001722:	e769      	b.n	80015f8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001724:	2d03      	cmp	r5, #3
 8001726:	d025      	beq.n	8001774 <HAL_GPIO_Init+0x190>
 8001728:	2d11      	cmp	r5, #17
 800172a:	d185      	bne.n	8001638 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800172c:	68cc      	ldr	r4, [r1, #12]
 800172e:	3404      	adds	r4, #4
          break;
 8001730:	e782      	b.n	8001638 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8001732:	4565      	cmp	r5, ip
 8001734:	d009      	beq.n	800174a <HAL_GPIO_Init+0x166>
 8001736:	d812      	bhi.n	800175e <HAL_GPIO_Init+0x17a>
 8001738:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80017b4 <HAL_GPIO_Init+0x1d0>
 800173c:	454d      	cmp	r5, r9
 800173e:	d004      	beq.n	800174a <HAL_GPIO_Init+0x166>
 8001740:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001744:	454d      	cmp	r5, r9
 8001746:	f47f af77 	bne.w	8001638 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174a:	688c      	ldr	r4, [r1, #8]
 800174c:	b1e4      	cbz	r4, 8001788 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800174e:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001750:	bf0c      	ite	eq
 8001752:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001756:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175a:	2408      	movs	r4, #8
 800175c:	e76c      	b.n	8001638 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800175e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80017b8 <HAL_GPIO_Init+0x1d4>
 8001762:	454d      	cmp	r5, r9
 8001764:	d0f1      	beq.n	800174a <HAL_GPIO_Init+0x166>
 8001766:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800176a:	454d      	cmp	r5, r9
 800176c:	d0ed      	beq.n	800174a <HAL_GPIO_Init+0x166>
 800176e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001772:	e7e7      	b.n	8001744 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001774:	2400      	movs	r4, #0
 8001776:	e75f      	b.n	8001638 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001778:	68cc      	ldr	r4, [r1, #12]
          break;
 800177a:	e75d      	b.n	8001638 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800177c:	68cc      	ldr	r4, [r1, #12]
 800177e:	3408      	adds	r4, #8
          break;
 8001780:	e75a      	b.n	8001638 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001782:	68cc      	ldr	r4, [r1, #12]
 8001784:	340c      	adds	r4, #12
          break;
 8001786:	e757      	b.n	8001638 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001788:	2404      	movs	r4, #4
 800178a:	e755      	b.n	8001638 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800178c:	2500      	movs	r5, #0
 800178e:	e7a4      	b.n	80016da <HAL_GPIO_Init+0xf6>
 8001790:	2501      	movs	r5, #1
 8001792:	e7a2      	b.n	80016da <HAL_GPIO_Init+0xf6>
 8001794:	2502      	movs	r5, #2
 8001796:	e7a0      	b.n	80016da <HAL_GPIO_Init+0xf6>
 8001798:	2503      	movs	r5, #3
 800179a:	e79e      	b.n	80016da <HAL_GPIO_Init+0xf6>
 800179c:	2504      	movs	r5, #4
 800179e:	e79c      	b.n	80016da <HAL_GPIO_Init+0xf6>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010400 	.word	0x40010400
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40011c00 	.word	0x40011c00
 80017b0:	10210000 	.word	0x10210000
 80017b4:	10110000 	.word	0x10110000
 80017b8:	10310000 	.word	0x10310000

080017bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017bc:	6883      	ldr	r3, [r0, #8]
 80017be:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80017c0:	bf14      	ite	ne
 80017c2:	2001      	movne	r0, #1
 80017c4:	2000      	moveq	r0, #0
 80017c6:	4770      	bx	lr

080017c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c8:	b10a      	cbz	r2, 80017ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ca:	6101      	str	r1, [r0, #16]
 80017cc:	4770      	bx	lr
 80017ce:	0409      	lsls	r1, r1, #16
 80017d0:	e7fb      	b.n	80017ca <HAL_GPIO_WritePin+0x2>
	...

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d8:	4605      	mov	r5, r0
 80017da:	b908      	cbnz	r0, 80017e0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80017dc:	2001      	movs	r0, #1
 80017de:	e03c      	b.n	800185a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e0:	6803      	ldr	r3, [r0, #0]
 80017e2:	07db      	lsls	r3, r3, #31
 80017e4:	d410      	bmi.n	8001808 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	682b      	ldr	r3, [r5, #0]
 80017e8:	079f      	lsls	r7, r3, #30
 80017ea:	d45d      	bmi.n	80018a8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ec:	682b      	ldr	r3, [r5, #0]
 80017ee:	0719      	lsls	r1, r3, #28
 80017f0:	f100 8094 	bmi.w	800191c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	075a      	lsls	r2, r3, #29
 80017f8:	f100 80be 	bmi.w	8001978 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fc:	69e8      	ldr	r0, [r5, #28]
 80017fe:	2800      	cmp	r0, #0
 8001800:	f040 812c 	bne.w	8001a5c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001804:	2000      	movs	r0, #0
 8001806:	e028      	b.n	800185a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001808:	4c8f      	ldr	r4, [pc, #572]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b04      	cmp	r3, #4
 8001812:	d007      	beq.n	8001824 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001814:	6863      	ldr	r3, [r4, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d109      	bne.n	8001832 <HAL_RCC_OscConfig+0x5e>
 800181e:	6863      	ldr	r3, [r4, #4]
 8001820:	03de      	lsls	r6, r3, #15
 8001822:	d506      	bpl.n	8001832 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	039c      	lsls	r4, r3, #14
 8001828:	d5dd      	bpl.n	80017e6 <HAL_RCC_OscConfig+0x12>
 800182a:	686b      	ldr	r3, [r5, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1da      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
 8001830:	e7d4      	b.n	80017dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001832:	686b      	ldr	r3, [r5, #4]
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001838:	d112      	bne.n	8001860 <HAL_RCC_OscConfig+0x8c>
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001842:	f7ff fe5f 	bl	8001504 <HAL_GetTick>
 8001846:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	0398      	lsls	r0, r3, #14
 800184c:	d4cb      	bmi.n	80017e6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184e:	f7ff fe59 	bl	8001504 <HAL_GetTick>
 8001852:	1b80      	subs	r0, r0, r6
 8001854:	2864      	cmp	r0, #100	; 0x64
 8001856:	d9f7      	bls.n	8001848 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001858:	2003      	movs	r0, #3
}
 800185a:	b002      	add	sp, #8
 800185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001860:	b99b      	cbnz	r3, 800188a <HAL_RCC_OscConfig+0xb6>
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001868:	6023      	str	r3, [r4, #0]
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001872:	f7ff fe47 	bl	8001504 <HAL_GetTick>
 8001876:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	0399      	lsls	r1, r3, #14
 800187c:	d5b3      	bpl.n	80017e6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187e:	f7ff fe41 	bl	8001504 <HAL_GetTick>
 8001882:	1b80      	subs	r0, r0, r6
 8001884:	2864      	cmp	r0, #100	; 0x64
 8001886:	d9f7      	bls.n	8001878 <HAL_RCC_OscConfig+0xa4>
 8001888:	e7e6      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	d103      	bne.n	800189a <HAL_RCC_OscConfig+0xc6>
 8001892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001896:	6023      	str	r3, [r4, #0]
 8001898:	e7cf      	b.n	800183a <HAL_RCC_OscConfig+0x66>
 800189a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189e:	6023      	str	r3, [r4, #0]
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	e7cb      	b.n	8001840 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a8:	4c67      	ldr	r4, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	f013 0f0c 	tst.w	r3, #12
 80018b0:	d007      	beq.n	80018c2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018b2:	6863      	ldr	r3, [r4, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d110      	bne.n	80018de <HAL_RCC_OscConfig+0x10a>
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	03da      	lsls	r2, r3, #15
 80018c0:	d40d      	bmi.n	80018de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	079b      	lsls	r3, r3, #30
 80018c6:	d502      	bpl.n	80018ce <HAL_RCC_OscConfig+0xfa>
 80018c8:	692b      	ldr	r3, [r5, #16]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d186      	bne.n	80017dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	696a      	ldr	r2, [r5, #20]
 80018d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018da:	6023      	str	r3, [r4, #0]
 80018dc:	e786      	b.n	80017ec <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018de:	692a      	ldr	r2, [r5, #16]
 80018e0:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <HAL_RCC_OscConfig+0x278>)
 80018e2:	b16a      	cbz	r2, 8001900 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018e8:	f7ff fe0c 	bl	8001504 <HAL_GetTick>
 80018ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	079f      	lsls	r7, r3, #30
 80018f2:	d4ec      	bmi.n	80018ce <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fe06 	bl	8001504 <HAL_GetTick>
 80018f8:	1b80      	subs	r0, r0, r6
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9f7      	bls.n	80018ee <HAL_RCC_OscConfig+0x11a>
 80018fe:	e7ab      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001900:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001902:	f7ff fdff 	bl	8001504 <HAL_GetTick>
 8001906:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	0798      	lsls	r0, r3, #30
 800190c:	f57f af6e 	bpl.w	80017ec <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001910:	f7ff fdf8 	bl	8001504 <HAL_GetTick>
 8001914:	1b80      	subs	r0, r0, r6
 8001916:	2802      	cmp	r0, #2
 8001918:	d9f6      	bls.n	8001908 <HAL_RCC_OscConfig+0x134>
 800191a:	e79d      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191c:	69aa      	ldr	r2, [r5, #24]
 800191e:	4c4a      	ldr	r4, [pc, #296]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_RCC_OscConfig+0x27c>)
 8001922:	b1da      	cbz	r2, 800195c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001928:	f7ff fdec 	bl	8001504 <HAL_GetTick>
 800192c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001930:	079b      	lsls	r3, r3, #30
 8001932:	d50d      	bpl.n	8001950 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001934:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001938:	4b46      	ldr	r3, [pc, #280]	; (8001a54 <HAL_RCC_OscConfig+0x280>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001940:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001942:	bf00      	nop
  }
  while (Delay --);
 8001944:	9b01      	ldr	r3, [sp, #4]
 8001946:	1e5a      	subs	r2, r3, #1
 8001948:	9201      	str	r2, [sp, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <HAL_RCC_OscConfig+0x16e>
 800194e:	e751      	b.n	80017f4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001950:	f7ff fdd8 	bl	8001504 <HAL_GetTick>
 8001954:	1b80      	subs	r0, r0, r6
 8001956:	2802      	cmp	r0, #2
 8001958:	d9e9      	bls.n	800192e <HAL_RCC_OscConfig+0x15a>
 800195a:	e77d      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800195c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800195e:	f7ff fdd1 	bl	8001504 <HAL_GetTick>
 8001962:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001966:	079f      	lsls	r7, r3, #30
 8001968:	f57f af44 	bpl.w	80017f4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff fdca 	bl	8001504 <HAL_GetTick>
 8001970:	1b80      	subs	r0, r0, r6
 8001972:	2802      	cmp	r0, #2
 8001974:	d9f6      	bls.n	8001964 <HAL_RCC_OscConfig+0x190>
 8001976:	e76f      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001978:	4c33      	ldr	r4, [pc, #204]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 800197a:	69e3      	ldr	r3, [r4, #28]
 800197c:	00d8      	lsls	r0, r3, #3
 800197e:	d424      	bmi.n	80019ca <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001980:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	69e3      	ldr	r3, [r4, #28]
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	61e3      	str	r3, [r4, #28]
 800198a:	69e3      	ldr	r3, [r4, #28]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	4e30      	ldr	r6, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x284>)
 8001996:	6833      	ldr	r3, [r6, #0]
 8001998:	05d9      	lsls	r1, r3, #23
 800199a:	d518      	bpl.n	80019ce <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	68eb      	ldr	r3, [r5, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d126      	bne.n	80019f0 <HAL_RCC_OscConfig+0x21c>
 80019a2:	6a23      	ldr	r3, [r4, #32]
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019aa:	f7ff fdab 	bl	8001504 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019b2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	6a23      	ldr	r3, [r4, #32]
 80019b6:	079b      	lsls	r3, r3, #30
 80019b8:	d53f      	bpl.n	8001a3a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	f43f af1e 	beq.w	80017fc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c0:	69e3      	ldr	r3, [r4, #28]
 80019c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c6:	61e3      	str	r3, [r4, #28]
 80019c8:	e718      	b.n	80017fc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	2700      	movs	r7, #0
 80019cc:	e7e2      	b.n	8001994 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ce:	6833      	ldr	r3, [r6, #0]
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80019d6:	f7ff fd95 	bl	8001504 <HAL_GetTick>
 80019da:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	6833      	ldr	r3, [r6, #0]
 80019de:	05da      	lsls	r2, r3, #23
 80019e0:	d4dc      	bmi.n	800199c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7ff fd8f 	bl	8001504 <HAL_GetTick>
 80019e6:	eba0 0008 	sub.w	r0, r0, r8
 80019ea:	2864      	cmp	r0, #100	; 0x64
 80019ec:	d9f6      	bls.n	80019dc <HAL_RCC_OscConfig+0x208>
 80019ee:	e733      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	b9ab      	cbnz	r3, 8001a1e <HAL_RCC_OscConfig+0x24a>
 80019f2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6223      	str	r3, [r4, #32]
 80019fe:	6a23      	ldr	r3, [r4, #32]
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a06:	f7ff fd7d 	bl	8001504 <HAL_GetTick>
 8001a0a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	6a23      	ldr	r3, [r4, #32]
 8001a0e:	0798      	lsls	r0, r3, #30
 8001a10:	d5d3      	bpl.n	80019ba <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fd77 	bl	8001504 <HAL_GetTick>
 8001a16:	1b80      	subs	r0, r0, r6
 8001a18:	4540      	cmp	r0, r8
 8001a1a:	d9f7      	bls.n	8001a0c <HAL_RCC_OscConfig+0x238>
 8001a1c:	e71c      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	6a23      	ldr	r3, [r4, #32]
 8001a22:	d103      	bne.n	8001a2c <HAL_RCC_OscConfig+0x258>
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6223      	str	r3, [r4, #32]
 8001a2a:	e7ba      	b.n	80019a2 <HAL_RCC_OscConfig+0x1ce>
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6223      	str	r3, [r4, #32]
 8001a32:	6a23      	ldr	r3, [r4, #32]
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	e7b6      	b.n	80019a8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff fd63 	bl	8001504 <HAL_GetTick>
 8001a3e:	eba0 0008 	sub.w	r0, r0, r8
 8001a42:	42b0      	cmp	r0, r6
 8001a44:	d9b6      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1e0>
 8001a46:	e707      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	42420000 	.word	0x42420000
 8001a50:	42420480 	.word	0x42420480
 8001a54:	20000008 	.word	0x20000008
 8001a58:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <HAL_RCC_OscConfig+0x334>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	461c      	mov	r4, r3
 8001a62:	f002 020c 	and.w	r2, r2, #12
 8001a66:	2a08      	cmp	r2, #8
 8001a68:	d03d      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x312>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4e27      	ldr	r6, [pc, #156]	; (8001b0c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a70:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a72:	d12b      	bne.n	8001acc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001a74:	f7ff fd46 	bl	8001504 <HAL_GetTick>
 8001a78:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	0199      	lsls	r1, r3, #6
 8001a7e:	d41f      	bmi.n	8001ac0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a80:	6a2b      	ldr	r3, [r5, #32]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a88:	6862      	ldr	r2, [r4, #4]
 8001a8a:	68a9      	ldr	r1, [r5, #8]
 8001a8c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001a90:	430a      	orrs	r2, r1
 8001a92:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a94:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001a96:	6862      	ldr	r2, [r4, #4]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fd2d 	bl	8001504 <HAL_GetTick>
 8001aaa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	019a      	lsls	r2, r3, #6
 8001ab0:	f53f aea8 	bmi.w	8001804 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff fd26 	bl	8001504 <HAL_GetTick>
 8001ab8:	1b40      	subs	r0, r0, r5
 8001aba:	2802      	cmp	r0, #2
 8001abc:	d9f6      	bls.n	8001aac <HAL_RCC_OscConfig+0x2d8>
 8001abe:	e6cb      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fd20 	bl	8001504 <HAL_GetTick>
 8001ac4:	1bc0      	subs	r0, r0, r7
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9d7      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2a6>
 8001aca:	e6c5      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001acc:	f7ff fd1a 	bl	8001504 <HAL_GetTick>
 8001ad0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	f57f ae95 	bpl.w	8001804 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fd13 	bl	8001504 <HAL_GetTick>
 8001ade:	1b40      	subs	r0, r0, r5
 8001ae0:	2802      	cmp	r0, #2
 8001ae2:	d9f6      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x2fe>
 8001ae4:	e6b8      	b.n	8001858 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae6:	2801      	cmp	r0, #1
 8001ae8:	f43f aeb7 	beq.w	800185a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001aec:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	6a2b      	ldr	r3, [r5, #32]
 8001af0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f47f ae71 	bne.w	80017dc <HAL_RCC_OscConfig+0x8>
 8001afa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001afc:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001b00:	1ac0      	subs	r0, r0, r3
 8001b02:	bf18      	it	ne
 8001b04:	2001      	movne	r0, #1
 8001b06:	e6a8      	b.n	800185a <HAL_RCC_OscConfig+0x86>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	42420060 	.word	0x42420060

08001b10 <HAL_RCC_GetSysClockFreq>:
{
 8001b10:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001b14:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b16:	ac02      	add	r4, sp, #8
 8001b18:	f103 0510 	add.w	r5, r3, #16
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	3308      	adds	r3, #8
 8001b24:	c203      	stmia	r2!, {r0, r1}
 8001b26:	42ab      	cmp	r3, r5
 8001b28:	4614      	mov	r4, r2
 8001b2a:	d1f7      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001b32:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001b34:	4911      	ldr	r1, [pc, #68]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b36:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001b3a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b3c:	f003 020c 	and.w	r2, r3, #12
 8001b40:	2a08      	cmp	r2, #8
 8001b42:	d117      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b44:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001b48:	a806      	add	r0, sp, #24
 8001b4a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b4c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b4e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b52:	d50c      	bpl.n	8001b6e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b54:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b56:	480a      	ldr	r0, [pc, #40]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b58:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b5c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b5e:	aa06      	add	r2, sp, #24
 8001b60:	4413      	add	r3, r2
 8001b62:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b66:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b6a:	b007      	add	sp, #28
 8001b6c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x74>)
 8001b70:	4350      	muls	r0, r2
 8001b72:	e7fa      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001b76:	e7f8      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x5a>
 8001b78:	080024a7 	.word	0x080024a7
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	007a1200 	.word	0x007a1200
 8001b84:	003d0900 	.word	0x003d0900

08001b88 <HAL_RCC_ClockConfig>:
{
 8001b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b8c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001b8e:	4604      	mov	r4, r0
 8001b90:	b910      	cbnz	r0, 8001b98 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
 8001b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4a45      	ldr	r2, [pc, #276]	; (8001cb0 <HAL_RCC_ClockConfig+0x128>)
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	428b      	cmp	r3, r1
 8001ba2:	d329      	bcc.n	8001bf8 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	6821      	ldr	r1, [r4, #0]
 8001ba6:	078e      	lsls	r6, r1, #30
 8001ba8:	d431      	bmi.n	8001c0e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001baa:	07ca      	lsls	r2, r1, #31
 8001bac:	d444      	bmi.n	8001c38 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bae:	4a40      	ldr	r2, [pc, #256]	; (8001cb0 <HAL_RCC_ClockConfig+0x128>)
 8001bb0:	6813      	ldr	r3, [r2, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	429d      	cmp	r5, r3
 8001bb8:	d367      	bcc.n	8001c8a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	4d3d      	ldr	r5, [pc, #244]	; (8001cb4 <HAL_RCC_ClockConfig+0x12c>)
 8001bbe:	f012 0f04 	tst.w	r2, #4
 8001bc2:	d16e      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	0713      	lsls	r3, r2, #28
 8001bc6:	d506      	bpl.n	8001bd6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bc8:	686b      	ldr	r3, [r5, #4]
 8001bca:	6922      	ldr	r2, [r4, #16]
 8001bcc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001bd0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bd4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd6:	f7ff ff9b 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001bda:	686b      	ldr	r3, [r5, #4]
 8001bdc:	4a36      	ldr	r2, [pc, #216]	; (8001cb8 <HAL_RCC_ClockConfig+0x130>)
 8001bde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	40d8      	lsrs	r0, r3
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_RCC_ClockConfig+0x134>)
 8001be8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001bea:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <HAL_RCC_ClockConfig+0x138>)
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	f7ff fc47 	bl	8001480 <HAL_InitTick>
  return HAL_OK;
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	6813      	ldr	r3, [r2, #0]
 8001bfa:	f023 0307 	bic.w	r3, r3, #7
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4299      	cmp	r1, r3
 8001c0a:	d1c2      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xa>
 8001c0c:	e7ca      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1c>
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	bf1e      	ittt	ne
 8001c16:	685a      	ldrne	r2, [r3, #4]
 8001c18:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001c1c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c20:	bf42      	ittt	mi
 8001c22:	685a      	ldrmi	r2, [r3, #4]
 8001c24:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001c28:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	68a0      	ldr	r0, [r4, #8]
 8001c2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c32:	4302      	orrs	r2, r0
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	e7b8      	b.n	8001baa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c38:	6862      	ldr	r2, [r4, #4]
 8001c3a:	4e1e      	ldr	r6, [pc, #120]	; (8001cb4 <HAL_RCC_ClockConfig+0x12c>)
 8001c3c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c40:	d11b      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	d0a4      	beq.n	8001b92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c48:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c56:	f7ff fc55 	bl	8001504 <HAL_GetTick>
 8001c5a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5c:	6873      	ldr	r3, [r6, #4]
 8001c5e:	6862      	ldr	r2, [r4, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c68:	d0a1      	beq.n	8001bae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6a:	f7ff fc4b 	bl	8001504 <HAL_GetTick>
 8001c6e:	1bc0      	subs	r0, r0, r7
 8001c70:	4540      	cmp	r0, r8
 8001c72:	d9f3      	bls.n	8001c5c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001c74:	2003      	movs	r0, #3
}
 8001c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7a:	2a02      	cmp	r2, #2
 8001c7c:	d102      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c82:	e7e0      	b.n	8001c46 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	f013 0f02 	tst.w	r3, #2
 8001c88:	e7dd      	b.n	8001c46 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	f023 0307 	bic.w	r3, r3, #7
 8001c90:	432b      	orrs	r3, r5
 8001c92:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c94:	6813      	ldr	r3, [r2, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	429d      	cmp	r5, r3
 8001c9c:	f47f af79 	bne.w	8001b92 <HAL_RCC_ClockConfig+0xa>
 8001ca0:	e78b      	b.n	8001bba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca2:	686b      	ldr	r3, [r5, #4]
 8001ca4:	68e1      	ldr	r1, [r4, #12]
 8001ca6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001caa:	430b      	orrs	r3, r1
 8001cac:	606b      	str	r3, [r5, #4]
 8001cae:	e789      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	08002c47 	.word	0x08002c47
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000010 	.word	0x20000010

08001cc4 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001cc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001cc8:	461c      	mov	r4, r3
 8001cca:	4616      	mov	r6, r2
 8001ccc:	460f      	mov	r7, r1
 8001cce:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001cd0:	f7ff fc18 	bl	8001504 <HAL_GetTick>
 8001cd4:	4434      	add	r4, r6
 8001cd6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8001cd8:	f7ff fc14 	bl	8001504 <HAL_GetTick>
 8001cdc:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001ce6:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ce8:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8001cea:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cec:	6893      	ldr	r3, [r2, #8]
 8001cee:	ea37 0303 	bics.w	r3, r7, r3
 8001cf2:	d001      	beq.n	8001cf8 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x34>
    }
  }

  return HAL_OK;
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	e02e      	b.n	8001d56 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8001cf8:	1c73      	adds	r3, r6, #1
 8001cfa:	d0f7      	beq.n	8001cec <SPI_WaitFlagStateUntilTimeout.constprop.8+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001cfc:	f7ff fc02 	bl	8001504 <HAL_GetTick>
 8001d00:	eba0 0008 	sub.w	r0, r0, r8
 8001d04:	42a0      	cmp	r0, r4
 8001d06:	d329      	bcc.n	8001d5c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d10:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d12:	686a      	ldr	r2, [r5, #4]
 8001d14:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001d18:	d10a      	bne.n	8001d30 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x6c>
 8001d1a:	68aa      	ldr	r2, [r5, #8]
 8001d1c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d20:	d002      	beq.n	8001d28 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001d26:	d103      	bne.n	8001d30 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d2e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001d32:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d36:	d107      	bne.n	8001d48 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x84>
          SPI_RESET_CRC(hspi);
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d46:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2003      	movs	r0, #3
 8001d52:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8001d56:	b002      	add	sp, #8
 8001d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8001d5c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001d5e:	2b00      	cmp	r3, #0
      count--;
 8001d60:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001d62:	bf08      	it	eq
 8001d64:	2400      	moveq	r4, #0
      count--;
 8001d66:	3b01      	subs	r3, #1
 8001d68:	e7be      	b.n	8001ce8 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x24>
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008

08001d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d72:	4613      	mov	r3, r2
 8001d74:	460a      	mov	r2, r1
 8001d76:	2180      	movs	r1, #128	; 0x80
{
 8001d78:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d7a:	f7ff ffa3 	bl	8001cc4 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8001d7e:	b120      	cbz	r0, 8001d8a <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001d80:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d84:	f043 0320 	orr.w	r3, r3, #32
 8001d88:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001d8a:	bd10      	pop	{r4, pc}

08001d8c <HAL_SPI_Init>:
{
 8001d8c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001d8e:	4604      	mov	r4, r0
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d051      	beq.n	8001e38 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d14a      	bne.n	8001e30 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d9a:	6842      	ldr	r2, [r0, #4]
 8001d9c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001da0:	d000      	beq.n	8001da4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001da2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001da8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001dac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001db0:	b923      	cbnz	r3, 8001dbc <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8001db2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff faf0 	bl	800139c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001dbc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001dbe:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001dc0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001dc4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dc6:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dcc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001dd4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001dd8:	4303      	orrs	r3, r0
 8001dda:	68e0      	ldr	r0, [r4, #12]
 8001ddc:	69a1      	ldr	r1, [r4, #24]
 8001dde:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8001de2:	4303      	orrs	r3, r0
 8001de4:	6920      	ldr	r0, [r4, #16]
 8001de6:	f000 0002 	and.w	r0, r0, #2
 8001dea:	4303      	orrs	r3, r0
 8001dec:	6960      	ldr	r0, [r4, #20]
 8001dee:	f000 0001 	and.w	r0, r0, #1
 8001df2:	4303      	orrs	r3, r0
 8001df4:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8001df8:	4303      	orrs	r3, r0
 8001dfa:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001dfc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dfe:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8001e02:	4303      	orrs	r3, r0
 8001e04:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e06:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e0a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8001e0e:	4303      	orrs	r3, r0
 8001e10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e12:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8001e16:	4303      	orrs	r3, r0
 8001e18:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e1a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e1c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e1e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e24:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001e26:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e28:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e2a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001e2e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e34:	6143      	str	r3, [r0, #20]
 8001e36:	e7b5      	b.n	8001da4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001e38:	2001      	movs	r0, #1
}
 8001e3a:	bd10      	pop	{r4, pc}

08001e3c <HAL_SPI_Transmit>:
{
 8001e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001e40:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001e42:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001e46:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001e48:	2b01      	cmp	r3, #1
{
 8001e4a:	460d      	mov	r5, r1
 8001e4c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001e4e:	f000 809e 	beq.w	8001f8e <HAL_SPI_Transmit+0x152>
 8001e52:	2301      	movs	r3, #1
 8001e54:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001e58:	f7ff fb54 	bl	8001504 <HAL_GetTick>
 8001e5c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e5e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001e62:	b2c0      	uxtb	r0, r0
 8001e64:	2801      	cmp	r0, #1
 8001e66:	f040 8090 	bne.w	8001f8a <HAL_SPI_Transmit+0x14e>
  if ((pData == NULL) || (Size == 0U))
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	d060      	beq.n	8001f30 <HAL_SPI_Transmit+0xf4>
 8001e6e:	f1b8 0f00 	cmp.w	r8, #0
 8001e72:	d05d      	beq.n	8001f30 <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e74:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e76:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e78:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e7c:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e7e:	6560      	str	r0, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferCount = Size;
 8001e84:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e88:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e8a:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e8c:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e8e:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e90:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e92:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e94:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
 8001e98:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e9a:	d107      	bne.n	8001eac <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8001e9c:	6803      	ldr	r3, [r0, #0]
 8001e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ea2:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8001ea4:	6803      	ldr	r3, [r0, #0]
 8001ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eaa:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eac:	6803      	ldr	r3, [r0, #0]
 8001eae:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001eb0:	bf5e      	ittt	pl
 8001eb2:	6803      	ldrpl	r3, [r0, #0]
 8001eb4:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001eb8:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001eba:	68e3      	ldr	r3, [r4, #12]
 8001ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ec0:	6863      	ldr	r3, [r4, #4]
 8001ec2:	d13e      	bne.n	8001f42 <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ec4:	b113      	cbz	r3, 8001ecc <HAL_SPI_Transmit+0x90>
 8001ec6:	f1b8 0f01 	cmp.w	r8, #1
 8001eca:	d107      	bne.n	8001edc <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ecc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001ed0:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ed2:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001ed4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001edc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b9a3      	cbnz	r3, 8001f0c <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ee2:	463a      	mov	r2, r7
 8001ee4:	4631      	mov	r1, r6
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff ff42 	bl	8001d70 <SPI_EndRxTxTransaction>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d149      	bne.n	8001f84 <HAL_SPI_Transmit+0x148>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ef0:	68a3      	ldr	r3, [r4, #8]
 8001ef2:	b933      	cbnz	r3, 8001f02 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	9201      	str	r2, [sp, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f02:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001f04:	3000      	adds	r0, #0
 8001f06:	bf18      	it	ne
 8001f08:	2001      	movne	r0, #1
 8001f0a:	e011      	b.n	8001f30 <HAL_SPI_Transmit+0xf4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f0c:	6822      	ldr	r2, [r4, #0]
 8001f0e:	6893      	ldr	r3, [r2, #8]
 8001f10:	0798      	lsls	r0, r3, #30
 8001f12:	d505      	bpl.n	8001f20 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f16:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001f1a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f1c:	6323      	str	r3, [r4, #48]	; 0x30
 8001f1e:	e7d9      	b.n	8001ed4 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f20:	f7ff faf0 	bl	8001504 <HAL_GetTick>
 8001f24:	1bc0      	subs	r0, r0, r7
 8001f26:	42b0      	cmp	r0, r6
 8001f28:	d3d8      	bcc.n	8001edc <HAL_SPI_Transmit+0xa0>
 8001f2a:	1c71      	adds	r1, r6, #1
 8001f2c:	d0d6      	beq.n	8001edc <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8001f2e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001f30:	2301      	movs	r3, #1
 8001f32:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f36:	2300      	movs	r3, #0
 8001f38:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001f3c:	b002      	add	sp, #8
 8001f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f42:	b113      	cbz	r3, 8001f4a <HAL_SPI_Transmit+0x10e>
 8001f44:	f1b8 0f01 	cmp.w	r8, #1
 8001f48:	d108      	bne.n	8001f5c <HAL_SPI_Transmit+0x120>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f4a:	782b      	ldrb	r3, [r5, #0]
 8001f4c:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f50:	3301      	adds	r3, #1
 8001f52:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001f54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001f5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0be      	beq.n	8001ee2 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	0792      	lsls	r2, r2, #30
 8001f6a:	d503      	bpl.n	8001f74 <HAL_SPI_Transmit+0x138>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f6e:	7812      	ldrb	r2, [r2, #0]
 8001f70:	731a      	strb	r2, [r3, #12]
 8001f72:	e7ec      	b.n	8001f4e <HAL_SPI_Transmit+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f74:	f7ff fac6 	bl	8001504 <HAL_GetTick>
 8001f78:	1bc0      	subs	r0, r0, r7
 8001f7a:	4286      	cmp	r6, r0
 8001f7c:	d8ee      	bhi.n	8001f5c <HAL_SPI_Transmit+0x120>
 8001f7e:	1c73      	adds	r3, r6, #1
 8001f80:	d0ec      	beq.n	8001f5c <HAL_SPI_Transmit+0x120>
 8001f82:	e7d4      	b.n	8001f2e <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f84:	2320      	movs	r3, #32
 8001f86:	6563      	str	r3, [r4, #84]	; 0x54
 8001f88:	e7b2      	b.n	8001ef0 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8001f8a:	2002      	movs	r0, #2
 8001f8c:	e7d0      	b.n	8001f30 <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 8001f8e:	2002      	movs	r0, #2
 8001f90:	e7d4      	b.n	8001f3c <HAL_SPI_Transmit+0x100>
	...

08001f94 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d128      	bne.n	8001fee <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa2:	6803      	ldr	r3, [r0, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fac:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_TIM_Base_Start_IT+0x60>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d012      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x44>
 8001fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00e      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x44>
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x44>
 8001fc0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x44>
 8001fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x44>
 8001fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d104      	bne.n	8001fe2 <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fde:	2a06      	cmp	r2, #6
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2000      	movs	r0, #0
}
 8001fec:	4770      	bx	lr
    return HAL_ERROR;
 8001fee:	2001      	movs	r0, #1
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40012c00 	.word	0x40012c00

08001ff8 <HAL_TIM_OC_DelayElapsedCallback>:
 8001ff8:	4770      	bx	lr

08001ffa <HAL_TIM_IC_CaptureCallback>:
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ffc:	4770      	bx	lr

08001ffe <HAL_TIM_TriggerCallback>:
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002000:	6803      	ldr	r3, [r0, #0]
{
 8002002:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002004:	691a      	ldr	r2, [r3, #16]
{
 8002006:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002008:	0791      	lsls	r1, r2, #30
 800200a:	d50e      	bpl.n	800202a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	0792      	lsls	r2, r2, #30
 8002010:	d50b      	bpl.n	800202a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002012:	f06f 0202 	mvn.w	r2, #2
 8002016:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002018:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800201a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800201c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800201e:	079b      	lsls	r3, r3, #30
 8002020:	d077      	beq.n	8002112 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002022:	f7ff ffea 	bl	8001ffa <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	2300      	movs	r3, #0
 8002028:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	0750      	lsls	r0, r2, #29
 8002030:	d510      	bpl.n	8002054 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	0751      	lsls	r1, r2, #29
 8002036:	d50d      	bpl.n	8002054 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002038:	f06f 0204 	mvn.w	r2, #4
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800203e:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002040:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002042:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002044:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002048:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800204a:	d068      	beq.n	800211e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800204c:	f7ff ffd5 	bl	8001ffa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002050:	2300      	movs	r3, #0
 8002052:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	0712      	lsls	r2, r2, #28
 800205a:	d50f      	bpl.n	800207c <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	0710      	lsls	r0, r2, #28
 8002060:	d50c      	bpl.n	800207c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002062:	f06f 0208 	mvn.w	r2, #8
 8002066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002068:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800206c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206e:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002070:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002072:	d05a      	beq.n	800212a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002074:	f7ff ffc1 	bl	8001ffa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002078:	2300      	movs	r3, #0
 800207a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	06d2      	lsls	r2, r2, #27
 8002082:	d510      	bpl.n	80020a6 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	06d0      	lsls	r0, r2, #27
 8002088:	d50d      	bpl.n	80020a6 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800208a:	f06f 0210 	mvn.w	r2, #16
 800208e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002090:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002092:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002094:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002096:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209c:	d04b      	beq.n	8002136 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	f7ff ffac 	bl	8001ffa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	2300      	movs	r3, #0
 80020a4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	07d1      	lsls	r1, r2, #31
 80020ac:	d508      	bpl.n	80020c0 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	07d2      	lsls	r2, r2, #31
 80020b2:	d505      	bpl.n	80020c0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b4:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80020bc:	f7fe f8b2 	bl	8000224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	0610      	lsls	r0, r2, #24
 80020c6:	d508      	bpl.n	80020da <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	0611      	lsls	r1, r2, #24
 80020cc:	d505      	bpl.n	80020da <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020d6:	f000 f986 	bl	80023e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	0652      	lsls	r2, r2, #25
 80020e0:	d508      	bpl.n	80020f4 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	0650      	lsls	r0, r2, #25
 80020e6:	d505      	bpl.n	80020f4 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80020f0:	f7ff ff85 	bl	8001ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	0691      	lsls	r1, r2, #26
 80020fa:	d522      	bpl.n	8002142 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	0692      	lsls	r2, r2, #26
 8002100:	d51f      	bpl.n	8002142 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002102:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002106:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800210c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800210e:	f000 b969 	b.w	80023e4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	f7ff ff71 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002116:	4620      	mov	r0, r4
 8002118:	f7ff ff70 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
 800211c:	e783      	b.n	8002026 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	f7ff ff6b 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002122:	4620      	mov	r0, r4
 8002124:	f7ff ff6a 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
 8002128:	e792      	b.n	8002050 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	f7ff ff65 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212e:	4620      	mov	r0, r4
 8002130:	f7ff ff64 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
 8002134:	e7a0      	b.n	8002078 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	f7ff ff5f 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213a:	4620      	mov	r0, r4
 800213c:	f7ff ff5e 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
 8002140:	e7af      	b.n	80020a2 <HAL_TIM_IRQHandler+0xa2>
 8002142:	bd10      	pop	{r4, pc}

08002144 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002144:	4a24      	ldr	r2, [pc, #144]	; (80021d8 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8002146:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002148:	4290      	cmp	r0, r2
 800214a:	d012      	beq.n	8002172 <TIM_Base_SetConfig+0x2e>
 800214c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002150:	4290      	cmp	r0, r2
 8002152:	d00e      	beq.n	8002172 <TIM_Base_SetConfig+0x2e>
 8002154:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002158:	d00b      	beq.n	8002172 <TIM_Base_SetConfig+0x2e>
 800215a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800215e:	4290      	cmp	r0, r2
 8002160:	d007      	beq.n	8002172 <TIM_Base_SetConfig+0x2e>
 8002162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002166:	4290      	cmp	r0, r2
 8002168:	d003      	beq.n	8002172 <TIM_Base_SetConfig+0x2e>
 800216a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800216e:	4290      	cmp	r0, r2
 8002170:	d11d      	bne.n	80021ae <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002172:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002178:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <TIM_Base_SetConfig+0x94>)
 800217c:	4290      	cmp	r0, r2
 800217e:	d012      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 8002180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002184:	4290      	cmp	r0, r2
 8002186:	d00e      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 8002188:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800218c:	d00b      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 800218e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002192:	4290      	cmp	r0, r2
 8002194:	d007      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 8002196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800219a:	4290      	cmp	r0, r2
 800219c:	d003      	beq.n	80021a6 <TIM_Base_SetConfig+0x62>
 800219e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d103      	bne.n	80021ae <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ac:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ae:	694a      	ldr	r2, [r1, #20]
 80021b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021b4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80021b6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b8:	688b      	ldr	r3, [r1, #8]
 80021ba:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021bc:	680b      	ldr	r3, [r1, #0]
 80021be:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <TIM_Base_SetConfig+0x94>)
 80021c2:	4298      	cmp	r0, r3
 80021c4:	d003      	beq.n	80021ce <TIM_Base_SetConfig+0x8a>
 80021c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ca:	4298      	cmp	r0, r3
 80021cc:	d101      	bne.n	80021d2 <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ce:	690b      	ldr	r3, [r1, #16]
 80021d0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d2:	2301      	movs	r3, #1
 80021d4:	6143      	str	r3, [r0, #20]
 80021d6:	4770      	bx	lr
 80021d8:	40012c00 	.word	0x40012c00

080021dc <HAL_TIM_Base_Init>:
{
 80021dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80021de:	4604      	mov	r4, r0
 80021e0:	b330      	cbz	r0, 8002230 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80021e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ea:	b91b      	cbnz	r3, 80021f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80021ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80021f0:	f7ff f906 	bl	8001400 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	1d21      	adds	r1, r4, #4
 80021fe:	f7ff ffa1 	bl	8002144 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002202:	2301      	movs	r3, #1
  return HAL_OK;
 8002204:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002206:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800220e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002212:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002216:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800221e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002222:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800222a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800222e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002230:	2001      	movs	r0, #1
}
 8002232:	bd10      	pop	{r4, pc}

08002234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002234:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002236:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002238:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800223a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800223e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002242:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002244:	6083      	str	r3, [r0, #8]
 8002246:	bd10      	pop	{r4, pc}

08002248 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002248:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800224c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800224e:	2b01      	cmp	r3, #1
{
 8002250:	4604      	mov	r4, r0
 8002252:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002256:	d019      	beq.n	800228c <HAL_TIM_ConfigClockSource+0x44>
 8002258:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800225a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800225e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002260:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002264:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800226a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800226e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002270:	680b      	ldr	r3, [r1, #0]
 8002272:	2b40      	cmp	r3, #64	; 0x40
 8002274:	d065      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0xfa>
 8002276:	d815      	bhi.n	80022a4 <HAL_TIM_ConfigClockSource+0x5c>
 8002278:	2b10      	cmp	r3, #16
 800227a:	d00c      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x4e>
 800227c:	d807      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x46>
 800227e:	b153      	cbz	r3, 8002296 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002280:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002282:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002284:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002288:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800228c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800228e:	2b20      	cmp	r3, #32
 8002290:	d001      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x4e>
 8002292:	2b30      	cmp	r3, #48	; 0x30
 8002294:	d1f4      	bne.n	8002280 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002296:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002298:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800229c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022a0:	4313      	orrs	r3, r2
 80022a2:	e01a      	b.n	80022da <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80022a4:	2b60      	cmp	r3, #96	; 0x60
 80022a6:	d034      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0xca>
 80022a8:	d819      	bhi.n	80022de <HAL_TIM_ConfigClockSource+0x96>
 80022aa:	2b50      	cmp	r3, #80	; 0x50
 80022ac:	d1e8      	bne.n	8002280 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ae:	684a      	ldr	r2, [r1, #4]
 80022b0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80022b2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ba:	f025 0501 	bic.w	r5, r5, #1
 80022be:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022c0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80022c2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80022cc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80022ce:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80022d0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022d6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80022da:	6083      	str	r3, [r0, #8]
 80022dc:	e7d0      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80022de:	2b70      	cmp	r3, #112	; 0x70
 80022e0:	d00c      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0xb4>
 80022e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022e6:	d1cb      	bne.n	8002280 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80022e8:	68cb      	ldr	r3, [r1, #12]
 80022ea:	684a      	ldr	r2, [r1, #4]
 80022ec:	6889      	ldr	r1, [r1, #8]
 80022ee:	f7ff ffa1 	bl	8002234 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022f2:	6822      	ldr	r2, [r4, #0]
 80022f4:	6893      	ldr	r3, [r2, #8]
 80022f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fa:	e008      	b.n	800230e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80022fc:	68cb      	ldr	r3, [r1, #12]
 80022fe:	684a      	ldr	r2, [r1, #4]
 8002300:	6889      	ldr	r1, [r1, #8]
 8002302:	f7ff ff97 	bl	8002234 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002306:	6822      	ldr	r2, [r4, #0]
 8002308:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800230a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800230e:	6093      	str	r3, [r2, #8]
      break;
 8002310:	e7b6      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002312:	684d      	ldr	r5, [r1, #4]
 8002314:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002316:	6a01      	ldr	r1, [r0, #32]
 8002318:	f021 0110 	bic.w	r1, r1, #16
 800231c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800231e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002320:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002322:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002326:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800232a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800232e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002332:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002334:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002336:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800233c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002340:	e7cb      	b.n	80022da <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002342:	684a      	ldr	r2, [r1, #4]
 8002344:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002346:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002348:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800234a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800234e:	f025 0501 	bic.w	r5, r5, #1
 8002352:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002354:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002356:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800235c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002360:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002362:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002364:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800236a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800236e:	e7b4      	b.n	80022da <HAL_TIM_ConfigClockSource+0x92>

08002370 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002370:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002374:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002376:	2b01      	cmp	r3, #1
 8002378:	f04f 0302 	mov.w	r3, #2
 800237c:	d02d      	beq.n	80023da <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800237e:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002384:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002386:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002388:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 800238a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 800238e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002392:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002394:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002396:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002398:	4c11      	ldr	r4, [pc, #68]	; (80023e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800239a:	42a3      	cmp	r3, r4
 800239c:	d012      	beq.n	80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800239e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80023a2:	42a3      	cmp	r3, r4
 80023a4:	d00e      	beq.n	80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d00b      	beq.n	80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80023ac:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 80023b0:	42a3      	cmp	r3, r4
 80023b2:	d007      	beq.n	80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80023b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80023b8:	42a3      	cmp	r3, r4
 80023ba:	d003      	beq.n	80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80023bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80023c0:	42a3      	cmp	r3, r4
 80023c2:	d104      	bne.n	80023ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023c4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ca:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d4:	2300      	movs	r3, #0
 80023d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80023da:	4618      	mov	r0, r3

  return HAL_OK;
}
 80023dc:	bd30      	pop	{r4, r5, pc}
 80023de:	bf00      	nop
 80023e0:	40012c00 	.word	0x40012c00

080023e4 <HAL_TIMEx_CommutCallback>:
 80023e4:	4770      	bx	lr

080023e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023e6:	4770      	bx	lr

080023e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023ea:	e003      	b.n	80023f4 <LoopCopyDataInit>

080023ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023f2:	3104      	adds	r1, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023f4:	480a      	ldr	r0, [pc, #40]	; (8002420 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023fc:	d3f6      	bcc.n	80023ec <CopyDataInit>
  ldr r2, =_sbss
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002400:	e002      	b.n	8002408 <LoopFillZerobss>

08002402 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002404:	f842 3b04 	str.w	r3, [r2], #4

08002408 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800240a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800240c:	d3f9      	bcc.n	8002402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800240e:	f7ff f835 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002412:	f000 f80f 	bl	8002434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002416:	f7fe f9ab 	bl	8000770 <main>
  bx lr
 800241a:	4770      	bx	lr
  ldr r3, =_sidata
 800241c:	08002c60 	.word	0x08002c60
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002424:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8002428:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 800242c:	20000584 	.word	0x20000584

08002430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <ADC1_2_IRQHandler>
	...

08002434 <__libc_init_array>:
 8002434:	b570      	push	{r4, r5, r6, lr}
 8002436:	2500      	movs	r5, #0
 8002438:	4e0c      	ldr	r6, [pc, #48]	; (800246c <__libc_init_array+0x38>)
 800243a:	4c0d      	ldr	r4, [pc, #52]	; (8002470 <__libc_init_array+0x3c>)
 800243c:	1ba4      	subs	r4, r4, r6
 800243e:	10a4      	asrs	r4, r4, #2
 8002440:	42a5      	cmp	r5, r4
 8002442:	d109      	bne.n	8002458 <__libc_init_array+0x24>
 8002444:	f000 f822 	bl	800248c <_init>
 8002448:	2500      	movs	r5, #0
 800244a:	4e0a      	ldr	r6, [pc, #40]	; (8002474 <__libc_init_array+0x40>)
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <__libc_init_array+0x44>)
 800244e:	1ba4      	subs	r4, r4, r6
 8002450:	10a4      	asrs	r4, r4, #2
 8002452:	42a5      	cmp	r5, r4
 8002454:	d105      	bne.n	8002462 <__libc_init_array+0x2e>
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800245c:	4798      	blx	r3
 800245e:	3501      	adds	r5, #1
 8002460:	e7ee      	b.n	8002440 <__libc_init_array+0xc>
 8002462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002466:	4798      	blx	r3
 8002468:	3501      	adds	r5, #1
 800246a:	e7f2      	b.n	8002452 <__libc_init_array+0x1e>
 800246c:	08002c58 	.word	0x08002c58
 8002470:	08002c58 	.word	0x08002c58
 8002474:	08002c58 	.word	0x08002c58
 8002478:	08002c5c 	.word	0x08002c5c

0800247c <memset>:
 800247c:	4603      	mov	r3, r0
 800247e:	4402      	add	r2, r0
 8002480:	4293      	cmp	r3, r2
 8002482:	d100      	bne.n	8002486 <memset+0xa>
 8002484:	4770      	bx	lr
 8002486:	f803 1b01 	strb.w	r1, [r3], #1
 800248a:	e7f9      	b.n	8002480 <memset+0x4>

0800248c <_init>:
 800248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248e:	bf00      	nop
 8002490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002492:	bc08      	pop	{r3}
 8002494:	469e      	mov	lr, r3
 8002496:	4770      	bx	lr

08002498 <_fini>:
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	bf00      	nop
 800249c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249e:	bc08      	pop	{r3}
 80024a0:	469e      	mov	lr, r3
 80024a2:	4770      	bx	lr
